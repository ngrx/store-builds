import { capitalize } from './helpers';
import { isPlainObject } from './meta-reducers/utils';
import { createFeatureSelector, createSelector, } from './selector';
export function createFeature({ name, reducer, }) {
    const featureSelector = createFeatureSelector(name);
    const nestedSelectors = createNestedSelectors(featureSelector, reducer);
    return Object.assign({ name,
        reducer, [`select${capitalize(name)}State`]: featureSelector }, nestedSelectors);
}
function createNestedSelectors(featureSelector, reducer) {
    const initialState = getInitialState(reducer);
    const nestedKeys = (isPlainObject(initialState)
        ? Object.keys(initialState)
        : []);
    return nestedKeys.reduce((nestedSelectors, nestedKey) => (Object.assign(Object.assign({}, nestedSelectors), { [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, (parentState) => parentState === null || parentState === void 0 ? void 0 : parentState[nestedKey]) })), {});
}
function getInitialState(reducer) {
    return reducer(undefined, { type: '@ngrx/feature/init' });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZV9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zdG9yZS9zcmMvZmVhdHVyZV9jcmVhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdkMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sWUFBWSxDQUFDO0FBK0NwQixNQUFNLFVBQVUsYUFBYSxDQUkzQixFQUNBLElBQUksRUFDSixPQUFPLEdBRWtDO0lBS3pDLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUF5QixJQUFJLENBQUMsQ0FBQztJQUM1RSxNQUFNLGVBQWUsR0FBRyxxQkFBcUIsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFFeEUsT0FBUSxnQkFDTixJQUFJO1FBQ0osT0FBTyxFQUNQLENBQUMsU0FBUyxVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLGVBQWUsSUFDaEQsZUFBZSxDQUN5QyxDQUFDO0FBQ2hFLENBQUM7QUFFRCxTQUFTLHFCQUFxQixDQUk1QixlQUF5RCxFQUN6RCxPQUFvQztJQUVwQyxNQUFNLFlBQVksR0FBRyxlQUFlLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDOUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDO1FBQzdDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMzQixDQUFDLENBQUMsRUFBRSxDQUF1QyxDQUFDO0lBRTlDLE9BQU8sVUFBVSxDQUFDLE1BQU0sQ0FDdEIsQ0FBQyxlQUFlLEVBQUUsU0FBUyxFQUFFLEVBQUUsQ0FBQyxpQ0FDM0IsZUFBZSxLQUNsQixDQUFDLFNBQVMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBRSxjQUFjLENBQ2hELGVBQWUsRUFDZixDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUMsV0FBVyxhQUFYLFdBQVcsdUJBQVgsV0FBVyxDQUFHLFNBQVMsQ0FBQyxDQUMxQyxJQUNELEVBQ0YsRUFBNkMsQ0FDOUMsQ0FBQztBQUNKLENBQUM7QUFFRCxTQUFTLGVBQWUsQ0FDdEIsT0FBb0M7SUFFcEMsT0FBTyxPQUFPLENBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLG9CQUFvQixFQUFFLENBQUMsQ0FBQztBQUM1RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2FwaXRhbGl6ZSB9IGZyb20gJy4vaGVscGVycyc7XG5pbXBvcnQgeyBBY3Rpb25SZWR1Y2VyIH0gZnJvbSAnLi9tb2RlbHMnO1xuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vbWV0YS1yZWR1Y2Vycy91dGlscyc7XG5pbXBvcnQge1xuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBNZW1vaXplZFNlbGVjdG9yLFxufSBmcm9tICcuL3NlbGVjdG9yJztcblxuZXhwb3J0IHR5cGUgRmVhdHVyZTxcbiAgQXBwU3RhdGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBGZWF0dXJlTmFtZSBleHRlbmRzIGtleW9mIEFwcFN0YXRlICYgc3RyaW5nLFxuICBGZWF0dXJlU3RhdGUgZXh0ZW5kcyBBcHBTdGF0ZVtGZWF0dXJlTmFtZV1cbj4gPSBGZWF0dXJlQ29uZmlnPEZlYXR1cmVOYW1lLCBGZWF0dXJlU3RhdGU+ICZcbiAgRmVhdHVyZVNlbGVjdG9yPEFwcFN0YXRlLCBGZWF0dXJlTmFtZSwgRmVhdHVyZVN0YXRlPiAmXG4gIE5lc3RlZFNlbGVjdG9yczxBcHBTdGF0ZSwgRmVhdHVyZVN0YXRlPjtcblxuZXhwb3J0IGludGVyZmFjZSBGZWF0dXJlQ29uZmlnPEZlYXR1cmVOYW1lIGV4dGVuZHMgc3RyaW5nLCBGZWF0dXJlU3RhdGU+IHtcbiAgbmFtZTogRmVhdHVyZU5hbWU7XG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8RmVhdHVyZVN0YXRlPjtcbn1cblxudHlwZSBGZWF0dXJlU2VsZWN0b3I8XG4gIEFwcFN0YXRlIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PixcbiAgRmVhdHVyZU5hbWUgZXh0ZW5kcyBrZXlvZiBBcHBTdGF0ZSAmIHN0cmluZyxcbiAgRmVhdHVyZVN0YXRlIGV4dGVuZHMgQXBwU3RhdGVbRmVhdHVyZU5hbWVdXG4+ID0ge1xuICBbSyBpbiBGZWF0dXJlTmFtZSBhcyBgc2VsZWN0JHtDYXBpdGFsaXplPEs+fVN0YXRlYF06IE1lbW9pemVkU2VsZWN0b3I8XG4gICAgQXBwU3RhdGUsXG4gICAgRmVhdHVyZVN0YXRlXG4gID47XG59O1xuXG50eXBlIFByaW1pdGl2ZSA9IHN0cmluZyB8IG51bWJlciB8IGJpZ2ludCB8IGJvb2xlYW4gfCBudWxsIHwgdW5kZWZpbmVkO1xuXG50eXBlIE5lc3RlZFNlbGVjdG9yczxcbiAgQXBwU3RhdGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBGZWF0dXJlU3RhdGVcbj4gPSBGZWF0dXJlU3RhdGUgZXh0ZW5kcyBQcmltaXRpdmUgfCB1bmtub3duW10gfCBEYXRlXG4gID8ge31cbiAgOiB7XG4gICAgICBbSyBpbiBrZXlvZiBGZWF0dXJlU3RhdGUgJlxuICAgICAgICBzdHJpbmcgYXMgYHNlbGVjdCR7Q2FwaXRhbGl6ZTxLPn1gXTogTWVtb2l6ZWRTZWxlY3RvcjxcbiAgICAgICAgQXBwU3RhdGUsXG4gICAgICAgIEZlYXR1cmVTdGF0ZVtLXVxuICAgICAgPjtcbiAgICB9O1xuXG50eXBlIE5vdEFsbG93ZWRGZWF0dXJlU3RhdGVDaGVjazxcbiAgRmVhdHVyZVN0YXRlXG4+ID0gRmVhdHVyZVN0YXRlIGV4dGVuZHMgUmVxdWlyZWQ8RmVhdHVyZVN0YXRlPlxuICA/IHVua25vd25cbiAgOiAnb3B0aW9uYWwgcHJvcGVydGllcyBhcmUgbm90IGFsbG93ZWQgaW4gdGhlIGZlYXR1cmUgc3RhdGUnO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRmVhdHVyZTxcbiAgQXBwU3RhdGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBGZWF0dXJlTmFtZSBleHRlbmRzIGtleW9mIEFwcFN0YXRlICYgc3RyaW5nID0ga2V5b2YgQXBwU3RhdGUgJiBzdHJpbmcsXG4gIEZlYXR1cmVTdGF0ZSBleHRlbmRzIEFwcFN0YXRlW0ZlYXR1cmVOYW1lXSA9IEFwcFN0YXRlW0ZlYXR1cmVOYW1lXVxuPih7XG4gIG5hbWUsXG4gIHJlZHVjZXIsXG59OiBGZWF0dXJlQ29uZmlnPEZlYXR1cmVOYW1lLCBGZWF0dXJlU3RhdGU+ICZcbiAgTm90QWxsb3dlZEZlYXR1cmVTdGF0ZUNoZWNrPEZlYXR1cmVTdGF0ZT4pOiBGZWF0dXJlPFxuICBBcHBTdGF0ZSxcbiAgRmVhdHVyZU5hbWUsXG4gIEZlYXR1cmVTdGF0ZVxuPiB7XG4gIGNvbnN0IGZlYXR1cmVTZWxlY3RvciA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxBcHBTdGF0ZSwgRmVhdHVyZVN0YXRlPihuYW1lKTtcbiAgY29uc3QgbmVzdGVkU2VsZWN0b3JzID0gY3JlYXRlTmVzdGVkU2VsZWN0b3JzKGZlYXR1cmVTZWxlY3RvciwgcmVkdWNlcik7XG5cbiAgcmV0dXJuICh7XG4gICAgbmFtZSxcbiAgICByZWR1Y2VyLFxuICAgIFtgc2VsZWN0JHtjYXBpdGFsaXplKG5hbWUpfVN0YXRlYF06IGZlYXR1cmVTZWxlY3RvcixcbiAgICAuLi5uZXN0ZWRTZWxlY3RvcnMsXG4gIH0gYXMgdW5rbm93bikgYXMgRmVhdHVyZTxBcHBTdGF0ZSwgRmVhdHVyZU5hbWUsIEZlYXR1cmVTdGF0ZT47XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZU5lc3RlZFNlbGVjdG9yczxcbiAgQXBwU3RhdGUgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICBGZWF0dXJlU3RhdGVcbj4oXG4gIGZlYXR1cmVTZWxlY3RvcjogTWVtb2l6ZWRTZWxlY3RvcjxBcHBTdGF0ZSwgRmVhdHVyZVN0YXRlPixcbiAgcmVkdWNlcjogQWN0aW9uUmVkdWNlcjxGZWF0dXJlU3RhdGU+XG4pOiBOZXN0ZWRTZWxlY3RvcnM8QXBwU3RhdGUsIEZlYXR1cmVTdGF0ZT4ge1xuICBjb25zdCBpbml0aWFsU3RhdGUgPSBnZXRJbml0aWFsU3RhdGUocmVkdWNlcik7XG4gIGNvbnN0IG5lc3RlZEtleXMgPSAoaXNQbGFpbk9iamVjdChpbml0aWFsU3RhdGUpXG4gICAgPyBPYmplY3Qua2V5cyhpbml0aWFsU3RhdGUpXG4gICAgOiBbXSkgYXMgQXJyYXk8a2V5b2YgRmVhdHVyZVN0YXRlICYgc3RyaW5nPjtcblxuICByZXR1cm4gbmVzdGVkS2V5cy5yZWR1Y2UoXG4gICAgKG5lc3RlZFNlbGVjdG9ycywgbmVzdGVkS2V5KSA9PiAoe1xuICAgICAgLi4ubmVzdGVkU2VsZWN0b3JzLFxuICAgICAgW2BzZWxlY3Qke2NhcGl0YWxpemUobmVzdGVkS2V5KX1gXTogY3JlYXRlU2VsZWN0b3IoXG4gICAgICAgIGZlYXR1cmVTZWxlY3RvcixcbiAgICAgICAgKHBhcmVudFN0YXRlKSA9PiBwYXJlbnRTdGF0ZT8uW25lc3RlZEtleV1cbiAgICAgICksXG4gICAgfSksXG4gICAge30gYXMgTmVzdGVkU2VsZWN0b3JzPEFwcFN0YXRlLCBGZWF0dXJlU3RhdGU+XG4gICk7XG59XG5cbmZ1bmN0aW9uIGdldEluaXRpYWxTdGF0ZTxGZWF0dXJlU3RhdGU+KFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPEZlYXR1cmVTdGF0ZT5cbik6IEZlYXR1cmVTdGF0ZSB7XG4gIHJldHVybiByZWR1Y2VyKHVuZGVmaW5lZCwgeyB0eXBlOiAnQG5ncngvZmVhdHVyZS9pbml0JyB9KTtcbn1cbiJdfQ==