import { capitalize } from './helpers';
import { isPlainObject } from './meta-reducers/utils';
import { createFeatureSelector, createSelector, } from './selector';
/**
 * @description
 * A function that accepts a feature name and a feature reducer, and creates
 * a feature selector and a selector for each feature state property.
 *
 * @param featureConfig An object that contains a feature name and a feature reducer.
 * @returns An object that contains a feature name, a feature reducer,
 * a feature selector, a the selector for each feature state property.
 *
 * @usageNotes
 *
 * **With Application State**
 *
 * ```ts
 * interface AppState {
 *   products: ProductsState;
 * }
 *
 * interface ProductsState {
 *   products: Product[];
 *   selectedId: string | null;
 * }
 *
 * const initialState: ProductsState = {
 *   products: [],
 *   selectedId: null,
 * };
 *
 * // AppState is passed as a generic argument
 * const productsFeature = createFeature<AppState>({
 *   name: 'products',
 *   reducer: createReducer(
 *     initialState,
 *     on(ProductsApiActions.loadSuccess(state, { products }) => ({
 *       ...state,
 *       products,
 *     }),
 *   ),
 * });
 *
 * const {
 *   selectProductsState, // type: MemoizedSelector<AppState, ProductsState>
 *   selectProducts, // type: MemoizedSelector<AppState, Product[]>
 *   selectSelectedId, // type: MemoizedSelector<AppState, string | null>
 * } = productsFeature;
 * ```
 *
 * **Without Application State**
 *
 * ```ts
 * const productsFeature = createFeature({
 *   name: 'products',
 *   reducer: createReducer(initialState),
 * });
 *
 * const {
 *   selectProductsState, // type: MemoizedSelector<Record<string, any>, ProductsState>
 *   selectProducts, // type: MemoizedSelector<Record<string, any>, Product[]>
 *   selectSelectedId, // type: MemoizedSelector<Record<string, any, string | null>
 * } = productsFeature;
 * ```
 */
export function createFeature(featureConfig) {
    const { name, reducer } = featureConfig;
    const featureSelector = createFeatureSelector(name);
    const nestedSelectors = createNestedSelectors(featureSelector, reducer);
    return Object.assign({ name,
        reducer, [`select${capitalize(name)}State`]: featureSelector }, nestedSelectors);
}
function createNestedSelectors(featureSelector, reducer) {
    const initialState = getInitialState(reducer);
    const nestedKeys = (isPlainObject(initialState)
        ? Object.keys(initialState)
        : []);
    return nestedKeys.reduce((nestedSelectors, nestedKey) => (Object.assign(Object.assign({}, nestedSelectors), { [`select${capitalize(nestedKey)}`]: createSelector(featureSelector, (parentState) => parentState === null || parentState === void 0 ? void 0 : parentState[nestedKey]) })), {});
}
function getInitialState(reducer) {
    return reducer(undefined, { type: '@ngrx/feature/init' });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmVhdHVyZV9jcmVhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zdG9yZS9zcmMvZmVhdHVyZV9jcmVhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFdkMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3RELE9BQU8sRUFDTCxxQkFBcUIsRUFDckIsY0FBYyxHQUVmLE1BQU0sWUFBWSxDQUFDO0FBc0JwQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTZERztBQUNILE1BQU0sVUFBVSxhQUFhLENBSzNCLGFBQzJDO0lBRTNDLE1BQU0sRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLEdBQUcsYUFBYSxDQUFDO0lBQ3hDLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFlLElBQUksQ0FBQyxDQUFDO0lBQ2xFLE1BQU0sZUFBZSxHQUFHLHFCQUFxQixDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUV4RSxPQUFRLGdCQUNOLElBQUk7UUFDSixPQUFPLEVBQ1AsQ0FBQyxTQUFTLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsZUFBZSxJQUNoRCxlQUFlLENBQ3lDLENBQUM7QUFDaEUsQ0FBQztBQUVELFNBQVMscUJBQXFCLENBSTVCLGVBQXlELEVBQ3pELE9BQW9DO0lBRXBDLE1BQU0sWUFBWSxHQUFHLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QyxNQUFNLFVBQVUsR0FBRyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFDN0MsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxFQUFFLENBQXVDLENBQUM7SUFFOUMsT0FBTyxVQUFVLENBQUMsTUFBTSxDQUN0QixDQUFDLGVBQWUsRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLGlDQUMzQixlQUFlLEtBQ2xCLENBQUMsU0FBUyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FDaEQsZUFBZSxFQUNmLENBQUMsV0FBVyxFQUFFLEVBQUUsQ0FBQyxXQUFXLGFBQVgsV0FBVyx1QkFBWCxXQUFXLENBQUcsU0FBUyxDQUFDLENBQzFDLElBQ0QsRUFDRixFQUE2QyxDQUM5QyxDQUFDO0FBQ0osQ0FBQztBQUVELFNBQVMsZUFBZSxDQUN0QixPQUFvQztJQUVwQyxPQUFPLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyxDQUFDO0FBQzVELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYXBpdGFsaXplIH0gZnJvbSAnLi9oZWxwZXJzJztcbmltcG9ydCB7IEFjdGlvblJlZHVjZXIgfSBmcm9tICcuL21vZGVscyc7XG5pbXBvcnQgeyBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi9tZXRhLXJlZHVjZXJzL3V0aWxzJztcbmltcG9ydCB7XG4gIGNyZWF0ZUZlYXR1cmVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIE1lbW9pemVkU2VsZWN0b3IsXG59IGZyb20gJy4vc2VsZWN0b3InO1xuaW1wb3J0IHsgRmVhdHVyZVNlbGVjdG9yLCBOZXN0ZWRTZWxlY3RvcnMgfSBmcm9tICcuL2ZlYXR1cmVfY3JlYXRvcl9tb2RlbHMnO1xuXG5leHBvcnQgdHlwZSBGZWF0dXJlPFxuICBBcHBTdGF0ZSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIEZlYXR1cmVOYW1lIGV4dGVuZHMga2V5b2YgQXBwU3RhdGUgJiBzdHJpbmcsXG4gIEZlYXR1cmVTdGF0ZSBleHRlbmRzIEFwcFN0YXRlW0ZlYXR1cmVOYW1lXVxuPiA9IEZlYXR1cmVDb25maWc8RmVhdHVyZU5hbWUsIEZlYXR1cmVTdGF0ZT4gJlxuICBGZWF0dXJlU2VsZWN0b3I8QXBwU3RhdGUsIEZlYXR1cmVOYW1lLCBGZWF0dXJlU3RhdGU+ICZcbiAgTmVzdGVkU2VsZWN0b3JzPEFwcFN0YXRlLCBGZWF0dXJlU3RhdGU+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEZlYXR1cmVDb25maWc8RmVhdHVyZU5hbWUgZXh0ZW5kcyBzdHJpbmcsIEZlYXR1cmVTdGF0ZT4ge1xuICBuYW1lOiBGZWF0dXJlTmFtZTtcbiAgcmVkdWNlcjogQWN0aW9uUmVkdWNlcjxGZWF0dXJlU3RhdGU+O1xufVxuXG50eXBlIE5vdEFsbG93ZWRGZWF0dXJlU3RhdGVDaGVjazxcbiAgRmVhdHVyZVN0YXRlXG4+ID0gRmVhdHVyZVN0YXRlIGV4dGVuZHMgUmVxdWlyZWQ8RmVhdHVyZVN0YXRlPlxuICA/IHVua25vd25cbiAgOiAnb3B0aW9uYWwgcHJvcGVydGllcyBhcmUgbm90IGFsbG93ZWQgaW4gdGhlIGZlYXR1cmUgc3RhdGUnO1xuXG4vKipcbiAqIEBkZXNjcmlwdGlvblxuICogQSBmdW5jdGlvbiB0aGF0IGFjY2VwdHMgYSBmZWF0dXJlIG5hbWUgYW5kIGEgZmVhdHVyZSByZWR1Y2VyLCBhbmQgY3JlYXRlc1xuICogYSBmZWF0dXJlIHNlbGVjdG9yIGFuZCBhIHNlbGVjdG9yIGZvciBlYWNoIGZlYXR1cmUgc3RhdGUgcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIGZlYXR1cmVDb25maWcgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBmZWF0dXJlIG5hbWUgYW5kIGEgZmVhdHVyZSByZWR1Y2VyLlxuICogQHJldHVybnMgQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBmZWF0dXJlIG5hbWUsIGEgZmVhdHVyZSByZWR1Y2VyLFxuICogYSBmZWF0dXJlIHNlbGVjdG9yLCBhIHRoZSBzZWxlY3RvciBmb3IgZWFjaCBmZWF0dXJlIHN0YXRlIHByb3BlcnR5LlxuICpcbiAqIEB1c2FnZU5vdGVzXG4gKlxuICogKipXaXRoIEFwcGxpY2F0aW9uIFN0YXRlKipcbiAqXG4gKiBgYGB0c1xuICogaW50ZXJmYWNlIEFwcFN0YXRlIHtcbiAqICAgcHJvZHVjdHM6IFByb2R1Y3RzU3RhdGU7XG4gKiB9XG4gKlxuICogaW50ZXJmYWNlIFByb2R1Y3RzU3RhdGUge1xuICogICBwcm9kdWN0czogUHJvZHVjdFtdO1xuICogICBzZWxlY3RlZElkOiBzdHJpbmcgfCBudWxsO1xuICogfVxuICpcbiAqIGNvbnN0IGluaXRpYWxTdGF0ZTogUHJvZHVjdHNTdGF0ZSA9IHtcbiAqICAgcHJvZHVjdHM6IFtdLFxuICogICBzZWxlY3RlZElkOiBudWxsLFxuICogfTtcbiAqXG4gKiAvLyBBcHBTdGF0ZSBpcyBwYXNzZWQgYXMgYSBnZW5lcmljIGFyZ3VtZW50XG4gKiBjb25zdCBwcm9kdWN0c0ZlYXR1cmUgPSBjcmVhdGVGZWF0dXJlPEFwcFN0YXRlPih7XG4gKiAgIG5hbWU6ICdwcm9kdWN0cycsXG4gKiAgIHJlZHVjZXI6IGNyZWF0ZVJlZHVjZXIoXG4gKiAgICAgaW5pdGlhbFN0YXRlLFxuICogICAgIG9uKFByb2R1Y3RzQXBpQWN0aW9ucy5sb2FkU3VjY2VzcyhzdGF0ZSwgeyBwcm9kdWN0cyB9KSA9PiAoe1xuICogICAgICAgLi4uc3RhdGUsXG4gKiAgICAgICBwcm9kdWN0cyxcbiAqICAgICB9KSxcbiAqICAgKSxcbiAqIH0pO1xuICpcbiAqIGNvbnN0IHtcbiAqICAgc2VsZWN0UHJvZHVjdHNTdGF0ZSwgLy8gdHlwZTogTWVtb2l6ZWRTZWxlY3RvcjxBcHBTdGF0ZSwgUHJvZHVjdHNTdGF0ZT5cbiAqICAgc2VsZWN0UHJvZHVjdHMsIC8vIHR5cGU6IE1lbW9pemVkU2VsZWN0b3I8QXBwU3RhdGUsIFByb2R1Y3RbXT5cbiAqICAgc2VsZWN0U2VsZWN0ZWRJZCwgLy8gdHlwZTogTWVtb2l6ZWRTZWxlY3RvcjxBcHBTdGF0ZSwgc3RyaW5nIHwgbnVsbD5cbiAqIH0gPSBwcm9kdWN0c0ZlYXR1cmU7XG4gKiBgYGBcbiAqXG4gKiAqKldpdGhvdXQgQXBwbGljYXRpb24gU3RhdGUqKlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBwcm9kdWN0c0ZlYXR1cmUgPSBjcmVhdGVGZWF0dXJlKHtcbiAqICAgbmFtZTogJ3Byb2R1Y3RzJyxcbiAqICAgcmVkdWNlcjogY3JlYXRlUmVkdWNlcihpbml0aWFsU3RhdGUpLFxuICogfSk7XG4gKlxuICogY29uc3Qge1xuICogICBzZWxlY3RQcm9kdWN0c1N0YXRlLCAvLyB0eXBlOiBNZW1vaXplZFNlbGVjdG9yPFJlY29yZDxzdHJpbmcsIGFueT4sIFByb2R1Y3RzU3RhdGU+XG4gKiAgIHNlbGVjdFByb2R1Y3RzLCAvLyB0eXBlOiBNZW1vaXplZFNlbGVjdG9yPFJlY29yZDxzdHJpbmcsIGFueT4sIFByb2R1Y3RbXT5cbiAqICAgc2VsZWN0U2VsZWN0ZWRJZCwgLy8gdHlwZTogTWVtb2l6ZWRTZWxlY3RvcjxSZWNvcmQ8c3RyaW5nLCBhbnksIHN0cmluZyB8IG51bGw+XG4gKiB9ID0gcHJvZHVjdHNGZWF0dXJlO1xuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGZWF0dXJlPFxuICBBcHBTdGF0ZSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIEZlYXR1cmVOYW1lIGV4dGVuZHMga2V5b2YgQXBwU3RhdGUgJiBzdHJpbmcgPSBrZXlvZiBBcHBTdGF0ZSAmIHN0cmluZyxcbiAgRmVhdHVyZVN0YXRlIGV4dGVuZHMgQXBwU3RhdGVbRmVhdHVyZU5hbWVdID0gQXBwU3RhdGVbRmVhdHVyZU5hbWVdXG4+KFxuICBmZWF0dXJlQ29uZmlnOiBGZWF0dXJlQ29uZmlnPEZlYXR1cmVOYW1lLCBGZWF0dXJlU3RhdGU+ICZcbiAgICBOb3RBbGxvd2VkRmVhdHVyZVN0YXRlQ2hlY2s8RmVhdHVyZVN0YXRlPlxuKTogRmVhdHVyZTxBcHBTdGF0ZSwgRmVhdHVyZU5hbWUsIEZlYXR1cmVTdGF0ZT4ge1xuICBjb25zdCB7IG5hbWUsIHJlZHVjZXIgfSA9IGZlYXR1cmVDb25maWc7XG4gIGNvbnN0IGZlYXR1cmVTZWxlY3RvciA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxGZWF0dXJlU3RhdGU+KG5hbWUpO1xuICBjb25zdCBuZXN0ZWRTZWxlY3RvcnMgPSBjcmVhdGVOZXN0ZWRTZWxlY3RvcnMoZmVhdHVyZVNlbGVjdG9yLCByZWR1Y2VyKTtcblxuICByZXR1cm4gKHtcbiAgICBuYW1lLFxuICAgIHJlZHVjZXIsXG4gICAgW2BzZWxlY3Qke2NhcGl0YWxpemUobmFtZSl9U3RhdGVgXTogZmVhdHVyZVNlbGVjdG9yLFxuICAgIC4uLm5lc3RlZFNlbGVjdG9ycyxcbiAgfSBhcyB1bmtub3duKSBhcyBGZWF0dXJlPEFwcFN0YXRlLCBGZWF0dXJlTmFtZSwgRmVhdHVyZVN0YXRlPjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTmVzdGVkU2VsZWN0b3JzPFxuICBBcHBTdGF0ZSBleHRlbmRzIFJlY29yZDxzdHJpbmcsIGFueT4sXG4gIEZlYXR1cmVTdGF0ZVxuPihcbiAgZmVhdHVyZVNlbGVjdG9yOiBNZW1vaXplZFNlbGVjdG9yPEFwcFN0YXRlLCBGZWF0dXJlU3RhdGU+LFxuICByZWR1Y2VyOiBBY3Rpb25SZWR1Y2VyPEZlYXR1cmVTdGF0ZT5cbik6IE5lc3RlZFNlbGVjdG9yczxBcHBTdGF0ZSwgRmVhdHVyZVN0YXRlPiB7XG4gIGNvbnN0IGluaXRpYWxTdGF0ZSA9IGdldEluaXRpYWxTdGF0ZShyZWR1Y2VyKTtcbiAgY29uc3QgbmVzdGVkS2V5cyA9IChpc1BsYWluT2JqZWN0KGluaXRpYWxTdGF0ZSlcbiAgICA/IE9iamVjdC5rZXlzKGluaXRpYWxTdGF0ZSlcbiAgICA6IFtdKSBhcyBBcnJheTxrZXlvZiBGZWF0dXJlU3RhdGUgJiBzdHJpbmc+O1xuXG4gIHJldHVybiBuZXN0ZWRLZXlzLnJlZHVjZShcbiAgICAobmVzdGVkU2VsZWN0b3JzLCBuZXN0ZWRLZXkpID0+ICh7XG4gICAgICAuLi5uZXN0ZWRTZWxlY3RvcnMsXG4gICAgICBbYHNlbGVjdCR7Y2FwaXRhbGl6ZShuZXN0ZWRLZXkpfWBdOiBjcmVhdGVTZWxlY3RvcihcbiAgICAgICAgZmVhdHVyZVNlbGVjdG9yLFxuICAgICAgICAocGFyZW50U3RhdGUpID0+IHBhcmVudFN0YXRlPy5bbmVzdGVkS2V5XVxuICAgICAgKSxcbiAgICB9KSxcbiAgICB7fSBhcyBOZXN0ZWRTZWxlY3RvcnM8QXBwU3RhdGUsIEZlYXR1cmVTdGF0ZT5cbiAgKTtcbn1cblxuZnVuY3Rpb24gZ2V0SW5pdGlhbFN0YXRlPEZlYXR1cmVTdGF0ZT4oXG4gIHJlZHVjZXI6IEFjdGlvblJlZHVjZXI8RmVhdHVyZVN0YXRlPlxuKTogRmVhdHVyZVN0YXRlIHtcbiAgcmV0dXJuIHJlZHVjZXIodW5kZWZpbmVkLCB7IHR5cGU6ICdAbmdyeC9mZWF0dXJlL2luaXQnIH0pO1xufVxuIl19