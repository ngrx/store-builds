/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export const _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');
/** @type {?} */
export const INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');
/** @type {?} */
export const REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');
/** @type {?} */
export const _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');
/** @type {?} */
export const INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');
/** @type {?} */
export const _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');
/** @type {?} */
export const STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');
/** @type {?} */
export const _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');
/** @type {?} */
export const _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');
/** @type {?} */
export const _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');
/** @type {?} */
export const _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');
/** @type {?} */
export const _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');
/** @type {?} */
export const FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');
/**
 * User-defined meta reducers from StoreModule.forRoot()
 * @type {?}
 */
export const USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');
/**
 * Meta reducers defined either internally by \@ngrx/store or by library authors
 * @type {?}
 */
export const META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');
/**
 * Concats the user provided meta reducers and the meta reducers provided on the multi
 * injection token
 * @type {?}
 */
export const _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');
/**
 * Runtime checks defined by the user via an InjectionToken
 * Defaults to `_USER_RUNTIME_CHECKS`
 * @type {?}
 */
export const USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store User Runtime Checks Config');
/**
 * Runtime checks defined by the user via forRoot()
 * @type {?}
 */
export const _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');
/**
 * Runtime checks currently in use
 * @type {?}
 */
export const _ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zdG9yZS9zcmMvdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQUcvQyxNQUFNLE9BQU8sY0FBYyxHQUFHLElBQUksY0FBYyxDQUM5QyxvQ0FBb0MsQ0FDckM7O0FBQ0QsTUFBTSxPQUFPLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQywyQkFBMkIsQ0FBQzs7QUFDNUUsTUFBTSxPQUFPLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FDL0MsNkJBQTZCLENBQzlCOztBQUNELE1BQU0sT0FBTyxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FDaEQsK0NBQStDLENBQ2hEOztBQUNELE1BQU0sT0FBTyxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FDaEQsOEJBQThCLENBQy9COztBQUNELE1BQU0sT0FBTyxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsdUNBQXVDLENBQ3hDOztBQUNELE1BQU0sT0FBTyxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsNEJBQTRCLENBQUM7O0FBQzlFLE1BQU0sT0FBTyxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQy9DLHFDQUFxQyxDQUN0Qzs7QUFDRCxNQUFNLE9BQU8saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQ2pELHVDQUF1QyxDQUN4Qzs7QUFFRCxNQUFNLE9BQU8sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQ2hELHNDQUFzQyxDQUN2Qzs7QUFFRCxNQUFNLE9BQU8sZUFBZSxHQUFHLElBQUksY0FBYyxDQUMvQyxxQ0FBcUMsQ0FDdEM7O0FBRUQsTUFBTSxPQUFPLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUN2RCw2Q0FBNkMsQ0FDOUM7O0FBQ0QsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUNoRCw4QkFBOEIsQ0FDL0I7Ozs7O0FBS0QsTUFBTSxPQUFPLDJCQUEyQixHQUFHLElBQUksY0FBYyxDQUMzRCx5Q0FBeUMsQ0FDMUM7Ozs7O0FBS0QsTUFBTSxPQUFPLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FDN0MsMkJBQTJCLENBQzVCOzs7Ozs7QUFNRCxNQUFNLE9BQU8sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3ZELDZDQUE2QyxDQUM5Qzs7Ozs7O0FBTUQsTUFBTSxPQUFPLG1CQUFtQixHQUFHLElBQUksY0FBYyxDQUNuRCx3Q0FBd0MsQ0FDekM7Ozs7O0FBS0QsTUFBTSxPQUFPLG9CQUFvQixHQUFHLElBQUksY0FBYyxDQUNwRCxpREFBaUQsQ0FDbEQ7Ozs7O0FBS0QsTUFBTSxPQUFPLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUN0RCxxQ0FBcUMsQ0FDdEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUnVudGltZUNoZWNrcywgTWV0YVJlZHVjZXIgfSBmcm9tICcuL21vZGVscyc7XG5cbmV4cG9ydCBjb25zdCBfSU5JVElBTF9TVEFURSA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIEluaXRpYWwgU3RhdGUnXG4pO1xuZXhwb3J0IGNvbnN0IElOSVRJQUxfU1RBVEUgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0BuZ3J4L3N0b3JlIEluaXRpYWwgU3RhdGUnKTtcbmV4cG9ydCBjb25zdCBSRURVQ0VSX0ZBQ1RPUlkgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdAbmdyeC9zdG9yZSBSZWR1Y2VyIEZhY3RvcnknXG4pO1xuZXhwb3J0IGNvbnN0IF9SRURVQ0VSX0ZBQ1RPUlkgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdAbmdyeC9zdG9yZSBJbnRlcm5hbCBSZWR1Y2VyIEZhY3RvcnkgUHJvdmlkZXInXG4pO1xuZXhwb3J0IGNvbnN0IElOSVRJQUxfUkVEVUNFUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdAbmdyeC9zdG9yZSBJbml0aWFsIFJlZHVjZXJzJ1xuKTtcbmV4cG9ydCBjb25zdCBfSU5JVElBTF9SRURVQ0VSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIEluaXRpYWwgUmVkdWNlcnMnXG4pO1xuZXhwb3J0IGNvbnN0IFNUT1JFX0ZFQVRVUkVTID0gbmV3IEluamVjdGlvblRva2VuKCdAbmdyeC9zdG9yZSBTdG9yZSBGZWF0dXJlcycpO1xuZXhwb3J0IGNvbnN0IF9TVE9SRV9SRURVQ0VSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIFN0b3JlIFJlZHVjZXJzJ1xuKTtcbmV4cG9ydCBjb25zdCBfRkVBVFVSRV9SRURVQ0VSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIEZlYXR1cmUgUmVkdWNlcnMnXG4pO1xuXG5leHBvcnQgY29uc3QgX0ZFQVRVUkVfQ09ORklHUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIEZlYXR1cmUgQ29uZmlncydcbik7XG5cbmV4cG9ydCBjb25zdCBfU1RPUkVfRkVBVFVSRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdAbmdyeC9zdG9yZSBJbnRlcm5hbCBTdG9yZSBGZWF0dXJlcydcbik7XG5cbmV4cG9ydCBjb25zdCBfRkVBVFVSRV9SRURVQ0VSU19UT0tFTiA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIEZlYXR1cmUgUmVkdWNlcnMgVG9rZW4nXG4pO1xuZXhwb3J0IGNvbnN0IEZFQVRVUkVfUkVEVUNFUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXG4gICdAbmdyeC9zdG9yZSBGZWF0dXJlIFJlZHVjZXJzJ1xuKTtcblxuLyoqXG4gKiBVc2VyLWRlZmluZWQgbWV0YSByZWR1Y2VycyBmcm9tIFN0b3JlTW9kdWxlLmZvclJvb3QoKVxuICovXG5leHBvcnQgY29uc3QgVVNFUl9QUk9WSURFRF9NRVRBX1JFRFVDRVJTID0gbmV3IEluamVjdGlvblRva2VuPE1ldGFSZWR1Y2VyW10+KFxuICAnQG5ncngvc3RvcmUgVXNlciBQcm92aWRlZCBNZXRhIFJlZHVjZXJzJ1xuKTtcblxuLyoqXG4gKiBNZXRhIHJlZHVjZXJzIGRlZmluZWQgZWl0aGVyIGludGVybmFsbHkgYnkgQG5ncngvc3RvcmUgb3IgYnkgbGlicmFyeSBhdXRob3JzXG4gKi9cbmV4cG9ydCBjb25zdCBNRVRBX1JFRFVDRVJTID0gbmV3IEluamVjdGlvblRva2VuPE1ldGFSZWR1Y2VyW10+KFxuICAnQG5ncngvc3RvcmUgTWV0YSBSZWR1Y2Vycydcbik7XG5cbi8qKlxuICogQ29uY2F0cyB0aGUgdXNlciBwcm92aWRlZCBtZXRhIHJlZHVjZXJzIGFuZCB0aGUgbWV0YSByZWR1Y2VycyBwcm92aWRlZCBvbiB0aGUgbXVsdGlcbiAqIGluamVjdGlvbiB0b2tlblxuICovXG5leHBvcnQgY29uc3QgX1JFU09MVkVEX01FVEFfUkVEVUNFUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48TWV0YVJlZHVjZXI+KFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgUmVzb2x2ZWQgTWV0YSBSZWR1Y2Vycydcbik7XG5cbi8qKlxuICogUnVudGltZSBjaGVja3MgZGVmaW5lZCBieSB0aGUgdXNlciB2aWEgYW4gSW5qZWN0aW9uVG9rZW5cbiAqIERlZmF1bHRzIHRvIGBfVVNFUl9SVU5USU1FX0NIRUNLU2BcbiAqL1xuZXhwb3J0IGNvbnN0IFVTRVJfUlVOVElNRV9DSEVDS1MgPSBuZXcgSW5qZWN0aW9uVG9rZW48UnVudGltZUNoZWNrcz4oXG4gICdAbmdyeC9zdG9yZSBVc2VyIFJ1bnRpbWUgQ2hlY2tzIENvbmZpZydcbik7XG5cbi8qKlxuICogUnVudGltZSBjaGVja3MgZGVmaW5lZCBieSB0aGUgdXNlciB2aWEgZm9yUm9vdCgpXG4gKi9cbmV4cG9ydCBjb25zdCBfVVNFUl9SVU5USU1FX0NIRUNLUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSdW50aW1lQ2hlY2tzPihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIFVzZXIgUnVudGltZSBDaGVja3MgQ29uZmlnJ1xuKTtcblxuLyoqXG4gKiBSdW50aW1lIGNoZWNrcyBjdXJyZW50bHkgaW4gdXNlXG4gKi9cbmV4cG9ydCBjb25zdCBfQUNUSVZFX1JVTlRJTUVfQ0hFQ0tTID0gbmV3IEluamVjdGlvblRva2VuPFJ1bnRpbWVDaGVja3M+KFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgUnVudGltZSBDaGVja3MnXG4pO1xuIl19