{"version":3,"file":"state.js","sourceRoot":"ng://@ngrx/store/","sources":["src/state.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAuB,MAAM,eAAe,CAAC;AACxE,OAAO,EACL,eAAe,EACf,UAAU,EACV,cAAc,GAEf,MAAM,MAAM,CAAC;AACd,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,cAAc,EAAE,MAAM,gBAAgB,CAAC;AAEjE,OAAO,EAAkB,IAAI,EAAE,MAAM,mBAAmB,CAAC;AAIzD,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;;;;AAEzC,MAAM,OAAgB,eAAgB,SAAQ,UAAe;CAAG;;;;AAGhE,MAAM,OAAO,KAAS,SAAQ,eAAoB;;;;;;;IAKhD,YACE,QAAwB,EACxB,QAA2B,EAC3B,cAAqC,EACd,YAAiB;QAExC,KAAK,CAAC,YAAY,CAAC,CAAC;;cAEd,eAAe,GAAuB,QAAQ,CAAC,IAAI,CACvD,SAAS,CAAC,cAAc,CAAC,CAC1B;;cACK,kBAAkB,GAEpB,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;;cAE5C,IAAI,GAAuB,EAAE,KAAK,EAAE,YAAY,EAAE;;cAClD,eAAe,GAGhB,kBAAkB,CAAC,IAAI,CAC1B,IAAI,CACF,WAAW,EACX,IAAI,CACL,CACF;QAED,IAAI,CAAC,iBAAiB,GAAG,eAAe,CAAC,SAAS;;;;QAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,EAAE,EAAE;YACvE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YACjB,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC9B,CAAC,EAAC,CAAC;IACL,CAAC;;;;IAED,WAAW;QACT,IAAI,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC;QACrC,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;;AAvCe,UAAI,GAAG,IAAI,CAAC;;YAF7B,UAAU;;;;YARF,cAAc;YAEd,iBAAiB;YACjB,qBAAqB;4CAezB,MAAM,SAAC,aAAa;;;;IARvB,WAA4B;;;;;IAE5B,kCAAwC;;;;;;;;AA4C1C,MAAM,UAAU,WAAW,CACzB,kBAAyC,EAAE,KAAK,EAAE,SAAS,EAAE,EAC7D,CAAC,MAAM,EAAE,OAAO,CAA2B;UAErC,EAAE,KAAK,EAAE,GAAG,eAAe;IACjC,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,MAAM,EAAE,CAAC;AACnD,CAAC;;AAED,MAAM,OAAO,eAAe,GAAe;IACzC,KAAK;IACL,EAAE,OAAO,EAAE,eAAe,EAAE,WAAW,EAAE,KAAK,EAAE;CACjD","sourcesContent":["import { Inject, Injectable, OnDestroy, Provider } from '@angular/core';\nimport {\n  BehaviorSubject,\n  Observable,\n  queueScheduler,\n  Subscription,\n} from 'rxjs';\nimport { observeOn, scan, withLatestFrom } from 'rxjs/operators';\n\nimport { ActionsSubject, INIT } from './actions_subject';\nimport { Action, ActionReducer } from './models';\nimport { ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\nimport { INITIAL_STATE } from './tokens';\n\nexport abstract class StateObservable extends Observable<any> {}\n\n@Injectable()\nexport class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = INIT;\n\n  private stateSubscription: Subscription;\n\n  constructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions: ScannedActionsSubject,\n    @Inject(INITIAL_STATE) initialState: any\n  ) {\n    super(initialState);\n\n    const actionsOnQueue$: Observable<Action> = actions$.pipe(\n      observeOn(queueScheduler)\n    );\n    const withLatestReducer$: Observable<\n      [Action, ActionReducer<any, Action>]\n    > = actionsOnQueue$.pipe(withLatestFrom(reducer$));\n\n    const seed: StateActionPair<T> = { state: initialState };\n    const stateAndAction$: Observable<{\n      state: any;\n      action?: Action;\n    }> = withLatestReducer$.pipe(\n      scan<[Action, ActionReducer<T, Action>], StateActionPair<T>>(\n        reduceState,\n        seed\n      )\n    );\n\n    this.stateSubscription = stateAndAction$.subscribe(({ state, action }) => {\n      this.next(state);\n      scannedActions.next(action);\n    });\n  }\n\n  ngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\n}\n\nexport type StateActionPair<T, V extends Action = Action> = {\n  state: T | undefined;\n  action?: V;\n};\nexport function reduceState<T, V extends Action = Action>(\n  stateActionPair: StateActionPair<T, V> = { state: undefined },\n  [action, reducer]: [V, ActionReducer<T, V>]\n): StateActionPair<T, V> {\n  const { state } = stateActionPair;\n  return { state: reducer(state, action), action };\n}\n\nexport const STATE_PROVIDERS: Provider[] = [\n  State,\n  { provide: StateObservable, useExisting: State },\n];\n"]}