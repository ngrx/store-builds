{"version":3,"file":"testing.js","sources":["../testing/src/mock_state.ts","../testing/src/tokens.ts","../testing/src/mock_store.ts","../testing/src/mock_reducer_manager.ts","../testing/src/testing.ts","../testing/testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\n@Injectable()\nexport class MockStore<T> extends Store<T> {\n  static selectors = new Map<\n    | string\n    | MemoizedSelector<any, any>\n    | MemoizedSelectorWithProps<any, any, any>,\n    any\n  >();\n\n  public scannedActions$: Observable<Action>;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors?: MockSelector[]\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.state$.next(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    if (mockSelectors) {\n      mockSelectors.forEach(mockSelector => {\n        const selector = mockSelector.selector;\n        if (typeof selector === 'string') {\n          this.overrideSelector(selector, mockSelector.value);\n        } else {\n          this.overrideSelector(selector, mockSelector.value);\n        }\n      });\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n  }\n\n  overrideSelector<T, Result>(\n    selector: string,\n    value: Result\n  ): MemoizedSelector<string, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelector<T, Result>,\n    value: Result\n  ): MemoizedSelector<T, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelectorWithProps<T, any, Result>,\n    value: Result\n  ): MemoizedSelectorWithProps<T, any, Result>;\n  overrideSelector<T, Result>(\n    selector:\n      | string\n      | MemoizedSelector<any, any>\n      | MemoizedSelectorWithProps<any, any, any>,\n    value: any\n  ) {\n    MockStore.selectors.set(selector, value);\n\n    if (typeof selector === 'string') {\n      const stringSelector = createSelector(() => {}, () => value);\n\n      return stringSelector;\n    }\n\n    selector.setResult(value);\n\n    return selector;\n  }\n\n  resetSelectors() {\n    MockStore.selectors.forEach((_, selector) => {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.setResult();\n      }\n    });\n\n    MockStore.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (MockStore.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        MockStore.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  return [\n    ActionsSubject,\n    MockState,\n    { provide: INITIAL_STATE, useValue: config.initialState },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useClass: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"],"names":[],"mappings":"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"}