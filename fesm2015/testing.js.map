{"version":3,"file":"testing.js","sources":["../../../../../../modules/store/testing/src/mock_state.ts","../../../../../../modules/store/testing/src/tokens.ts","../../../../../../modules/store/testing/src/mock_store.ts","../../../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../../../modules/store/testing/src/testing.ts","../../../../../../modules/store/testing/testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n    ? MemoizedSelectorWithProps<any, any, Result>\n    : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n        ? U\n        : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(() => {}, (): Result => value)\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  setNgrxMockEnvironment(true);\n  return [\n    ActionsSubject,\n    MockState,\n    MockStore,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"],"names":[],"mappings":"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"}