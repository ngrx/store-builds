{"version":3,"file":"mock_store.js","sourceRoot":"ng://@ngrx/store/testing/","sources":["mock_store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n    ? MemoizedSelectorWithProps<any, any, Result>\n    : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n        ? U\n        : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(() => {}, (): Result => value)\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n"]}