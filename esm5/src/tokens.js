import { InjectionToken } from '@angular/core';
export var _INITIAL_STATE = new InjectionToken('@ngrx/store Internal Initial State');
export var INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');
export var REDUCER_FACTORY = new InjectionToken('@ngrx/store Reducer Factory');
export var _REDUCER_FACTORY = new InjectionToken('@ngrx/store Internal Reducer Factory Provider');
export var INITIAL_REDUCERS = new InjectionToken('@ngrx/store Initial Reducers');
export var _INITIAL_REDUCERS = new InjectionToken('@ngrx/store Internal Initial Reducers');
export var STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');
export var _STORE_REDUCERS = new InjectionToken('@ngrx/store Internal Store Reducers');
export var _FEATURE_REDUCERS = new InjectionToken('@ngrx/store Internal Feature Reducers');
export var _FEATURE_CONFIGS = new InjectionToken('@ngrx/store Internal Feature Configs');
export var _STORE_FEATURES = new InjectionToken('@ngrx/store Internal Store Features');
export var _FEATURE_REDUCERS_TOKEN = new InjectionToken('@ngrx/store Internal Feature Reducers Token');
export var FEATURE_REDUCERS = new InjectionToken('@ngrx/store Feature Reducers');
/**
 * User-defined meta reducers from StoreModule.forRoot()
 */
export var USER_PROVIDED_META_REDUCERS = new InjectionToken('@ngrx/store User Provided Meta Reducers');
/**
 * Meta reducers defined either internally by @ngrx/store or by library authors
 */
export var META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');
/**
 * Concats the user provided meta reducers and the meta reducers provided on the multi
 * injection token
 */
export var _RESOLVED_META_REDUCERS = new InjectionToken('@ngrx/store Internal Resolved Meta Reducers');
/**
 * Runtime checks defined by the user
 */
export var _USER_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal User Runtime Checks Config');
/**
 * Runtime checks currently in use
 */
export var _ACTIVE_RUNTIME_CHECKS = new InjectionToken('@ngrx/store Internal Runtime Checks');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9rZW5zLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbW9kdWxlcy9zdG9yZS9zcmMvdG9rZW5zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHL0MsTUFBTSxDQUFDLElBQU0sY0FBYyxHQUFHLElBQUksY0FBYyxDQUM5QyxvQ0FBb0MsQ0FDckMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0FBQzdFLE1BQU0sQ0FBQyxJQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FDL0MsNkJBQTZCLENBQzlCLENBQUM7QUFDRixNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FDaEQsK0NBQStDLENBQ2hELENBQUM7QUFDRixNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FDaEQsOEJBQThCLENBQy9CLENBQUM7QUFDRixNQUFNLENBQUMsSUFBTSxpQkFBaUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsdUNBQXVDLENBQ3hDLENBQUM7QUFDRixNQUFNLENBQUMsSUFBTSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsNEJBQTRCLENBQUMsQ0FBQztBQUMvRSxNQUFNLENBQUMsSUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQy9DLHFDQUFxQyxDQUN0QyxDQUFDO0FBQ0YsTUFBTSxDQUFDLElBQU0saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQ2pELHVDQUF1QyxDQUN4QyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQ2hELHNDQUFzQyxDQUN2QyxDQUFDO0FBRUYsTUFBTSxDQUFDLElBQU0sZUFBZSxHQUFHLElBQUksY0FBYyxDQUMvQyxxQ0FBcUMsQ0FDdEMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxJQUFNLHVCQUF1QixHQUFHLElBQUksY0FBYyxDQUN2RCw2Q0FBNkMsQ0FDOUMsQ0FBQztBQUNGLE1BQU0sQ0FBQyxJQUFNLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUNoRCw4QkFBOEIsQ0FDL0IsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLElBQU0sMkJBQTJCLEdBQUcsSUFBSSxjQUFjLENBQzNELHlDQUF5QyxDQUMxQyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQzdDLDJCQUEyQixDQUM1QixDQUFDO0FBRUY7OztHQUdHO0FBQ0gsTUFBTSxDQUFDLElBQU0sdUJBQXVCLEdBQUcsSUFBSSxjQUFjLENBQ3ZELDZDQUE2QyxDQUM5QyxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsSUFBTSxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FDcEQsaURBQWlELENBQ2xELENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxJQUFNLHNCQUFzQixHQUFHLElBQUksY0FBYyxDQUN0RCxxQ0FBcUMsQ0FDdEMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSdW50aW1lQ2hlY2tzLCBNZXRhUmVkdWNlciB9IGZyb20gJy4vbW9kZWxzJztcblxuZXhwb3J0IGNvbnN0IF9JTklUSUFMX1NUQVRFID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgSW5pdGlhbCBTdGF0ZSdcbik7XG5leHBvcnQgY29uc3QgSU5JVElBTF9TVEFURSA9IG5ldyBJbmplY3Rpb25Ub2tlbignQG5ncngvc3RvcmUgSW5pdGlhbCBTdGF0ZScpO1xuZXhwb3J0IGNvbnN0IFJFRFVDRVJfRkFDVE9SWSA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIFJlZHVjZXIgRmFjdG9yeSdcbik7XG5leHBvcnQgY29uc3QgX1JFRFVDRVJfRkFDVE9SWSA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIFJlZHVjZXIgRmFjdG9yeSBQcm92aWRlcidcbik7XG5leHBvcnQgY29uc3QgSU5JVElBTF9SRURVQ0VSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEluaXRpYWwgUmVkdWNlcnMnXG4pO1xuZXhwb3J0IGNvbnN0IF9JTklUSUFMX1JFRFVDRVJTID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgSW5pdGlhbCBSZWR1Y2Vycydcbik7XG5leHBvcnQgY29uc3QgU1RPUkVfRkVBVFVSRVMgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ0BuZ3J4L3N0b3JlIFN0b3JlIEZlYXR1cmVzJyk7XG5leHBvcnQgY29uc3QgX1NUT1JFX1JFRFVDRVJTID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgU3RvcmUgUmVkdWNlcnMnXG4pO1xuZXhwb3J0IGNvbnN0IF9GRUFUVVJFX1JFRFVDRVJTID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgRmVhdHVyZSBSZWR1Y2Vycydcbik7XG5cbmV4cG9ydCBjb25zdCBfRkVBVFVSRV9DT05GSUdTID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgRmVhdHVyZSBDb25maWdzJ1xuKTtcblxuZXhwb3J0IGNvbnN0IF9TVE9SRV9GRUFUVVJFUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIFN0b3JlIEZlYXR1cmVzJ1xuKTtcblxuZXhwb3J0IGNvbnN0IF9GRUFUVVJFX1JFRFVDRVJTX1RPS0VOID0gbmV3IEluamVjdGlvblRva2VuKFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgRmVhdHVyZSBSZWR1Y2VycyBUb2tlbidcbik7XG5leHBvcnQgY29uc3QgRkVBVFVSRV9SRURVQ0VSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbihcbiAgJ0BuZ3J4L3N0b3JlIEZlYXR1cmUgUmVkdWNlcnMnXG4pO1xuXG4vKipcbiAqIFVzZXItZGVmaW5lZCBtZXRhIHJlZHVjZXJzIGZyb20gU3RvcmVNb2R1bGUuZm9yUm9vdCgpXG4gKi9cbmV4cG9ydCBjb25zdCBVU0VSX1BST1ZJREVEX01FVEFfUkVEVUNFUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48TWV0YVJlZHVjZXJbXT4oXG4gICdAbmdyeC9zdG9yZSBVc2VyIFByb3ZpZGVkIE1ldGEgUmVkdWNlcnMnXG4pO1xuXG4vKipcbiAqIE1ldGEgcmVkdWNlcnMgZGVmaW5lZCBlaXRoZXIgaW50ZXJuYWxseSBieSBAbmdyeC9zdG9yZSBvciBieSBsaWJyYXJ5IGF1dGhvcnNcbiAqL1xuZXhwb3J0IGNvbnN0IE1FVEFfUkVEVUNFUlMgPSBuZXcgSW5qZWN0aW9uVG9rZW48TWV0YVJlZHVjZXJbXT4oXG4gICdAbmdyeC9zdG9yZSBNZXRhIFJlZHVjZXJzJ1xuKTtcblxuLyoqXG4gKiBDb25jYXRzIHRoZSB1c2VyIHByb3ZpZGVkIG1ldGEgcmVkdWNlcnMgYW5kIHRoZSBtZXRhIHJlZHVjZXJzIHByb3ZpZGVkIG9uIHRoZSBtdWx0aVxuICogaW5qZWN0aW9uIHRva2VuXG4gKi9cbmV4cG9ydCBjb25zdCBfUkVTT0xWRURfTUVUQV9SRURVQ0VSUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxNZXRhUmVkdWNlcj4oXG4gICdAbmdyeC9zdG9yZSBJbnRlcm5hbCBSZXNvbHZlZCBNZXRhIFJlZHVjZXJzJ1xuKTtcblxuLyoqXG4gKiBSdW50aW1lIGNoZWNrcyBkZWZpbmVkIGJ5IHRoZSB1c2VyXG4gKi9cbmV4cG9ydCBjb25zdCBfVVNFUl9SVU5USU1FX0NIRUNLUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxSdW50aW1lQ2hlY2tzPihcbiAgJ0BuZ3J4L3N0b3JlIEludGVybmFsIFVzZXIgUnVudGltZSBDaGVja3MgQ29uZmlnJ1xuKTtcblxuLyoqXG4gKiBSdW50aW1lIGNoZWNrcyBjdXJyZW50bHkgaW4gdXNlXG4gKi9cbmV4cG9ydCBjb25zdCBfQUNUSVZFX1JVTlRJTUVfQ0hFQ0tTID0gbmV3IEluamVjdGlvblRva2VuPFJ1bnRpbWVDaGVja3M+KFxuICAnQG5ncngvc3RvcmUgSW50ZXJuYWwgUnVudGltZSBDaGVja3MnXG4pO1xuIl19