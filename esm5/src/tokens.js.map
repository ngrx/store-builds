{"version":3,"file":"tokens.js","sourceRoot":"ng://@ngrx/store/","sources":["src/tokens.ts"],"names":[],"mappings":";;;;;AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;;AAG/C,MAAM,KAAO,iBAAiB,GAAG,IAAI,cAAc,CACjD,iCAAiC,CAClC;;AACD,MAAM,KAAO,cAAc,GAAG,IAAI,cAAc,CAC9C,oCAAoC,CACrC;;AACD,MAAM,KAAO,aAAa,GAAG,IAAI,cAAc,CAAC,2BAA2B,CAAC;;AAC5E,MAAM,KAAO,eAAe,GAAG,IAAI,cAAc,CAC/C,6BAA6B,CAC9B;;AACD,MAAM,KAAO,gBAAgB,GAAG,IAAI,cAAc,CAChD,+CAA+C,CAChD;;AACD,MAAM,KAAO,gBAAgB,GAAG,IAAI,cAAc,CAChD,8BAA8B,CAC/B;;AACD,MAAM,KAAO,iBAAiB,GAAG,IAAI,cAAc,CACjD,uCAAuC,CACxC;;AACD,MAAM,KAAO,cAAc,GAAG,IAAI,cAAc,CAAC,4BAA4B,CAAC;;AAC9E,MAAM,KAAO,eAAe,GAAG,IAAI,cAAc,CAC/C,qCAAqC,CACtC;;AACD,MAAM,KAAO,iBAAiB,GAAG,IAAI,cAAc,CACjD,uCAAuC,CACxC;;AAED,MAAM,KAAO,gBAAgB,GAAG,IAAI,cAAc,CAChD,sCAAsC,CACvC;;AAED,MAAM,KAAO,eAAe,GAAG,IAAI,cAAc,CAC/C,qCAAqC,CACtC;;AAED,MAAM,KAAO,uBAAuB,GAAG,IAAI,cAAc,CACvD,6CAA6C,CAC9C;;AACD,MAAM,KAAO,gBAAgB,GAAG,IAAI,cAAc,CAChD,8BAA8B,CAC/B;;;;;AAKD,MAAM,KAAO,2BAA2B,GAAG,IAAI,cAAc,CAC3D,yCAAyC,CAC1C;;;;;AAKD,MAAM,KAAO,aAAa,GAAG,IAAI,cAAc,CAC7C,2BAA2B,CAC5B;;;;;;AAMD,MAAM,KAAO,uBAAuB,GAAG,IAAI,cAAc,CACvD,6CAA6C,CAC9C;;;;;;AAMD,MAAM,KAAO,mBAAmB,GAAG,IAAI,cAAc,CACnD,wCAAwC,CACzC;;;;;AAKD,MAAM,KAAO,oBAAoB,GAAG,IAAI,cAAc,CACpD,iDAAiD,CAClD;;;;;AAKD,MAAM,KAAO,sBAAsB,GAAG,IAAI,cAAc,CACtD,qCAAqC,CACtC;;AAED,MAAM,KAAO,6BAA6B,GAAG,IAAI,cAAc,CAC7D,8CAA8C,CAC/C","sourcesContent":["import { InjectionToken } from '@angular/core';\nimport { RuntimeChecks, MetaReducer } from './models';\n\nexport const _ROOT_STORE_GUARD = new InjectionToken<void>(\n  '@ngrx/store Internal Root Guard'\n);\nexport const _INITIAL_STATE = new InjectionToken(\n  '@ngrx/store Internal Initial State'\n);\nexport const INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nexport const REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Reducer Factory'\n);\nexport const _REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Internal Reducer Factory Provider'\n);\nexport const INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Initial Reducers'\n);\nexport const _INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Initial Reducers'\n);\nexport const STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nexport const _STORE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Store Reducers'\n);\nexport const _FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers'\n);\n\nexport const _FEATURE_CONFIGS = new InjectionToken(\n  '@ngrx/store Internal Feature Configs'\n);\n\nexport const _STORE_FEATURES = new InjectionToken(\n  '@ngrx/store Internal Store Features'\n);\n\nexport const _FEATURE_REDUCERS_TOKEN = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers Token'\n);\nexport const FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Feature Reducers'\n);\n\n/**\n * User-defined meta reducers from StoreModule.forRoot()\n */\nexport const USER_PROVIDED_META_REDUCERS = new InjectionToken<MetaReducer[]>(\n  '@ngrx/store User Provided Meta Reducers'\n);\n\n/**\n * Meta reducers defined either internally by @ngrx/store or by library authors\n */\nexport const META_REDUCERS = new InjectionToken<MetaReducer[]>(\n  '@ngrx/store Meta Reducers'\n);\n\n/**\n * Concats the user provided meta reducers and the meta reducers provided on the multi\n * injection token\n */\nexport const _RESOLVED_META_REDUCERS = new InjectionToken<MetaReducer>(\n  '@ngrx/store Internal Resolved Meta Reducers'\n);\n\n/**\n * Runtime checks defined by the user via an InjectionToken\n * Defaults to `_USER_RUNTIME_CHECKS`\n */\nexport const USER_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store User Runtime Checks Config'\n);\n\n/**\n * Runtime checks defined by the user via forRoot()\n */\nexport const _USER_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store Internal User Runtime Checks Config'\n);\n\n/**\n * Runtime checks currently in use\n */\nexport const _ACTIVE_RUNTIME_CHECKS = new InjectionToken<RuntimeChecks>(\n  '@ngrx/store Internal Runtime Checks'\n);\n\nexport const _ACTION_TYPE_UNIQUENESS_CHECK = new InjectionToken<void>(\n  '@ngrx/store Check if Action types are unique'\n);\n"]}