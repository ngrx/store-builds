import * as tslib_1 from "tslib";
export function createAction(type, config) {
    if (typeof config === 'function') {
        return defineType(type, function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return (tslib_1.__assign({}, config.apply(void 0, tslib_1.__spread(args)), { type: type }));
        });
    }
    var as = config ? config._as : 'empty';
    switch (as) {
        case 'empty':
            return defineType(type, function () { return ({ type: type }); });
        case 'props':
            return defineType(type, function (props) { return (tslib_1.__assign({}, props, { type: type })); });
        default:
            throw new Error('Unexpected config.');
    }
}
export function props() {
    return { _as: 'props', _p: undefined };
}
export function union(creators) {
    return undefined;
}
function defineType(type, creator) {
    return Object.defineProperty(creator, 'type', {
        value: type,
        writable: false,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aW9uX2NyZWF0b3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL3N0b3JlL3NyYy9hY3Rpb25fY3JlYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBMkJBLE1BQU0sVUFBVSxZQUFZLENBQzFCLElBQU8sRUFDUCxNQUFtQztJQUVuQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFVBQVUsRUFBRTtRQUNoQyxPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUU7WUFBQyxjQUFrQjtpQkFBbEIsVUFBa0IsRUFBbEIscUJBQWtCLEVBQWxCLElBQWtCO2dCQUFsQix5QkFBa0I7O1lBQUssT0FBQSxzQkFDM0MsTUFBTSxnQ0FBSSxJQUFJLE1BQ2pCLElBQUksTUFBQSxJQUNKO1FBSDhDLENBRzlDLENBQUMsQ0FBQztLQUNMO0lBQ0QsSUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDekMsUUFBUSxFQUFFLEVBQUU7UUFDVixLQUFLLE9BQU87WUFDVixPQUFPLFVBQVUsQ0FBQyxJQUFJLEVBQUUsY0FBTSxPQUFBLENBQUMsRUFBRSxJQUFJLE1BQUEsRUFBRSxDQUFDLEVBQVYsQ0FBVSxDQUFDLENBQUM7UUFDNUMsS0FBSyxPQUFPO1lBQ1YsT0FBTyxVQUFVLENBQUMsSUFBSSxFQUFFLFVBQUMsS0FBYyxJQUFLLE9BQUEsc0JBQ3RDLEtBQWdCLElBQ3BCLElBQUksTUFBQSxJQUNKLEVBSDBDLENBRzFDLENBQUMsQ0FBQztRQUNOO1lBQ0UsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxLQUFLO0lBQ25CLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRSxTQUFVLEVBQUUsQ0FBQztBQUMxQyxDQUFDO0FBRUQsTUFBTSxVQUFVLEtBQUssQ0FFbkIsUUFBVztJQUNYLE9BQU8sU0FBVSxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLFVBQVUsQ0FBQyxJQUFZLEVBQUUsT0FBZ0I7SUFDaEQsT0FBTyxNQUFNLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUU7UUFDNUMsS0FBSyxFQUFFLElBQUk7UUFDWCxRQUFRLEVBQUUsS0FBSztLQUNoQixDQUFDLENBQUM7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ3JlYXRvcixcbiAgQWN0aW9uQ3JlYXRvcixcbiAgVHlwZWRBY3Rpb24sXG4gIEZ1bmN0aW9uV2l0aFBhcmFtZXRlcnNUeXBlLFxuICBQYXJhbWV0ZXJzVHlwZSxcbn0gZnJvbSAnLi9tb2RlbHMnO1xuXG4vKipcbiAqIEFjdGlvbiBjcmVhdG9ycyB0YWtlbiBmcm9tIHRzLWFjdGlvbiBsaWJyYXJ5IGFuZCBtb2RpZmllZCBhIGJpdCB0byBiZXR0ZXJcbiAqIGZpdCBjdXJyZW50IE5nUnggdXNhZ2UuIFRoYW5rIHlvdSBOaWNob2xhcyBKYW1pZXNvbiAoQGNhcnRhbnQpLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uPFQgZXh0ZW5kcyBzdHJpbmc+KFxuICB0eXBlOiBUXG4pOiBBY3Rpb25DcmVhdG9yPFQsICgpID0+IFR5cGVkQWN0aW9uPFQ+PjtcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb248VCBleHRlbmRzIHN0cmluZywgUCBleHRlbmRzIG9iamVjdD4oXG4gIHR5cGU6IFQsXG4gIGNvbmZpZzogeyBfYXM6ICdwcm9wcyc7IF9wOiBQIH1cbik6IEFjdGlvbkNyZWF0b3I8VCwgKHByb3BzOiBQKSA9PiBQICYgVHlwZWRBY3Rpb248VD4+O1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUFjdGlvbjxUIGV4dGVuZHMgc3RyaW5nLCBDIGV4dGVuZHMgQ3JlYXRvcj4oXG4gIHR5cGU6IFQsXG4gIGNyZWF0b3I6IENcbik6IEZ1bmN0aW9uV2l0aFBhcmFtZXRlcnNUeXBlPFxuICBQYXJhbWV0ZXJzVHlwZTxDPixcbiAgUmV0dXJuVHlwZTxDPiAmIFR5cGVkQWN0aW9uPFQ+XG4+ICZcbiAgVHlwZWRBY3Rpb248VD47XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uPFQgZXh0ZW5kcyBzdHJpbmc+KFxuICB0eXBlOiBULFxuICBjb25maWc/OiB7IF9hczogJ3Byb3BzJyB9IHwgQ3JlYXRvclxuKTogQ3JlYXRvciB7XG4gIGlmICh0eXBlb2YgY29uZmlnID09PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIGRlZmluZVR5cGUodHlwZSwgKC4uLmFyZ3M6IHVua25vd25bXSkgPT4gKHtcbiAgICAgIC4uLmNvbmZpZyguLi5hcmdzKSxcbiAgICAgIHR5cGUsXG4gICAgfSkpO1xuICB9XG4gIGNvbnN0IGFzID0gY29uZmlnID8gY29uZmlnLl9hcyA6ICdlbXB0eSc7XG4gIHN3aXRjaCAoYXMpIHtcbiAgICBjYXNlICdlbXB0eSc6XG4gICAgICByZXR1cm4gZGVmaW5lVHlwZSh0eXBlLCAoKSA9PiAoeyB0eXBlIH0pKTtcbiAgICBjYXNlICdwcm9wcyc6XG4gICAgICByZXR1cm4gZGVmaW5lVHlwZSh0eXBlLCAocHJvcHM6IHVua25vd24pID0+ICh7XG4gICAgICAgIC4uLihwcm9wcyBhcyBvYmplY3QpLFxuICAgICAgICB0eXBlLFxuICAgICAgfSkpO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VuZXhwZWN0ZWQgY29uZmlnLicpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wczxQPigpOiB7IF9hczogJ3Byb3BzJzsgX3A6IFAgfSB7XG4gIHJldHVybiB7IF9hczogJ3Byb3BzJywgX3A6IHVuZGVmaW5lZCEgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVuaW9uPFxuICBDIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBBY3Rpb25DcmVhdG9yPHN0cmluZywgQ3JlYXRvcj4gfVxuPihjcmVhdG9yczogQyk6IFJldHVyblR5cGU8Q1trZXlvZiBDXT4ge1xuICByZXR1cm4gdW5kZWZpbmVkITtcbn1cblxuZnVuY3Rpb24gZGVmaW5lVHlwZSh0eXBlOiBzdHJpbmcsIGNyZWF0b3I6IENyZWF0b3IpOiBDcmVhdG9yIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdG9yLCAndHlwZScsIHtcbiAgICB2YWx1ZTogdHlwZSxcbiAgICB3cml0YWJsZTogZmFsc2UsXG4gIH0pO1xufVxuIl19