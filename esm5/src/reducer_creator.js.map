{"version":3,"file":"reducer_creator.js","sourceRoot":"ng://@ngrx/store/","sources":["src/reducer_creator.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA,wBAGC;;;IAFC,qBAA0B;;IAC1B,mBAAgB;;;;;;AAIlB,+BAEC;;;;;;;;;;;AAyKD,MAAM,UAAU,EAAE;IAChB,cAAqC;SAArC,UAAqC,EAArC,qBAAqC,EAArC,IAAqC;QAArC,yBAAqC;;;QAE/B,OAAO,GAAG,mBAAA,IAAI,CAAC,GAAG,EAAE,EAAY;;QAChC,KAAK,GAAG,IAAI,CAAC,MAAM;;;;;IACvB,UAAC,MAAM,EAAE,OAAO,IAAK,gBAAI,MAAM,GAAE,CAAC,mBAAA,OAAO,EAAiB,CAAC,CAAC,IAAI,IAA3C,CAA4C,GACjE,mBAAA,EAAE,EAAY,CACf;IACD,OAAO,EAAE,OAAO,SAAA,EAAE,KAAK,OAAA,EAAE,CAAC;AAC5B,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCD,MAAM,UAAU,aAAa,CAC3B,YAAe;;IACf,aAAe;SAAf,UAAe,EAAf,qBAAe,EAAf,IAAe;QAAf,4BAAe;;;QAET,GAAG,GAAG,IAAI,GAAG,EAA+B;4BACzC,IAAE;;gCACA,IAAI;YACX,IAAI,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;;oBACX,iBAAe,GAAG,mBAAA,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,EAAuB;;oBACtD,UAAU;;;;;gBAAwB,UAAC,KAAK,EAAE,MAAM;oBACpD,OAAA,IAAE,CAAC,OAAO,CAAC,iBAAe,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,MAAM,CAAC;gBAAlD,CAAkD,CAAA;gBACpD,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;aAC3B;iBAAM;gBACL,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,IAAE,CAAC,OAAO,CAAC,CAAC;aAC3B;;;YARH,KAAiB,IAAA,oBAAA,SAAA,IAAE,CAAC,KAAK,CAAA,CAAA,gBAAA;gBAApB,IAAI,IAAI,WAAA;wBAAJ,IAAI;aASZ;;;;;;;;;;;QAVH,KAAe,IAAA,QAAA,SAAA,GAAG,CAAA,wBAAA;YAAb,IAAI,IAAE,gBAAA;oBAAF,IAAE;SAWV;;;;;;;;;IAED;;;;;IAAO,UAAS,KAAuB,EAAE,MAAS;QAAlC,sBAAA,EAAA,oBAAuB;;YAC/B,OAAO,GAAG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC;QACpC,OAAO,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;IAClD,CAAC,EAAC;AACJ,CAAC","sourcesContent":["import { ActionCreator, ActionReducer, ActionType, Action } from './models';\n\n// Return type of the `on` fn.\nexport interface On<S> {\n  reducer: ActionReducer<S>;\n  types: string[];\n}\n\n// Specialized Reducer that is aware of the Action type it needs to handle\nexport interface OnReducer<S, C extends ActionCreator[]> {\n  (state: S, action: ActionType<C[number]>): S;\n}\n\nexport function on<C1 extends ActionCreator, S>(\n  creator1: C1,\n  reducer: OnReducer<S, [C1]>\n): On<S>;\nexport function on<C1 extends ActionCreator, C2 extends ActionCreator, S>(\n  creator1: C1,\n  creator2: C2,\n  reducer: OnReducer<S, [C1, C2]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  reducer: OnReducer<S, [C1, C2, C3]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  reducer: OnReducer<S, [C1, C2, C3, C4]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  C8 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  creator8: C8,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  C8 extends ActionCreator,\n  C9 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  creator8: C8,\n  creator9: C9,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8, C9]>\n): On<S>;\nexport function on<\n  C1 extends ActionCreator,\n  C2 extends ActionCreator,\n  C3 extends ActionCreator,\n  C4 extends ActionCreator,\n  C5 extends ActionCreator,\n  C6 extends ActionCreator,\n  C7 extends ActionCreator,\n  C8 extends ActionCreator,\n  C9 extends ActionCreator,\n  C10 extends ActionCreator,\n  S\n>(\n  creator1: C1,\n  creator2: C2,\n  creator3: C3,\n  creator4: C4,\n  creator5: C5,\n  creator6: C6,\n  creator7: C7,\n  creator8: C8,\n  creator9: C9,\n  creator10: C10,\n  reducer: OnReducer<S, [C1, C2, C3, C4, C5, C6, C7, C8, C9, C10]>\n): On<S>;\nexport function on<S>(\n  creator: ActionCreator,\n  ...rest: (ActionCreator | OnReducer<S, [ActionCreator]>)[]\n): On<S>;\n/**\n * @description\n * Associates actions with a given state change function.\n * A state change function must be provided as the last parameter.\n *\n * @param args `ActionCreator`'s followed by a state change function.\n *\n * **To maintain type-safety**: pass 10 or less `ActionCreator`'s.\n * @returns an association of action types with a state change function.\n */\nexport function on(\n  ...args: (ActionCreator | Function)[]\n): { reducer: Function; types: string[] } {\n  const reducer = args.pop() as Function;\n  const types = args.reduce(\n    (result, creator) => [...result, (creator as ActionCreator).type],\n    [] as string[]\n  );\n  return { reducer, types };\n}\n\n/**\n * @description\n * Creates a reducer function to handle state transitions.\n *\n * Reducer creators reduce the explicitness of reducer functions with switch statements.\n *\n * @param initialState Provides a state value if the current state is `undefined`, as it is initially.\n * @param ons Associations between actions and state changes.\n * @returns A reducer function.\n *\n * @usageNotes\n *\n * - Must be used with `ActionCreator`'s (returned by `createAction`).  Cannot be used with class-based action creators.\n * - The returned `ActionReducer` should additionally be returned from an exported `reducer` function, if you are using View Engine.\n * In case you are using Ivy the extra function `reducer` is not required.\n *\n * **Declaring a reducer creator with an exported reducer function**\n *\n * ```ts\n * const featureReducer = createReducer(\n *   initialState,\n *   on(\n *     featureActions.actionOne,\n *     featureActions.actionTwo,\n *     (state, { updatedValue }) => ({ ...state, prop: updatedValue })\n *   ),\n *   on(featureActions.actionThree, () => initialState);\n * );\n *\n * export function reducer(state: State | undefined, action: Action) {\n *   return featureReducer(state, action);\n * }\n * ```\n */\nexport function createReducer<S, A extends Action = Action>(\n  initialState: S,\n  ...ons: On<S>[]\n): ActionReducer<S, A> {\n  const map = new Map<string, ActionReducer<S, A>>();\n  for (let on of ons) {\n    for (let type of on.types) {\n      if (map.has(type)) {\n        const existingReducer = map.get(type) as ActionReducer<S, A>;\n        const newReducer: ActionReducer<S, A> = (state, action) =>\n          on.reducer(existingReducer(state, action), action);\n        map.set(type, newReducer);\n      } else {\n        map.set(type, on.reducer);\n      }\n    }\n  }\n\n  return function(state: S = initialState, action: A): S {\n    const reducer = map.get(action.type);\n    return reducer ? reducer(state, action) : state;\n  };\n}\n"]}