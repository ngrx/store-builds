import * as tslib_1 from "tslib";
export function getUnserializable(target, path) {
    if (path === void 0) { path = []; }
    // Guard against undefined and null, e.g. a reducer that returns undefined
    if ((isUndefined(target) || isNull(target)) && path.length === 0) {
        return {
            path: ['root'],
            value: target,
        };
    }
    var keys = Object.keys(target);
    return keys.reduce(function (result, key) {
        if (result) {
            return result;
        }
        var value = target[key];
        if (isUndefined(value) ||
            isNull(value) ||
            isNumber(value) ||
            isBoolean(value) ||
            isString(value) ||
            isArray(value)) {
            return false;
        }
        if (isPlainObject(value)) {
            return getUnserializable(value, tslib_1.__spread(path, [key]));
        }
        return {
            path: tslib_1.__spread(path, [key]),
            value: value,
        };
    }, false);
}
export function throwIfUnserializable(unserializable, context) {
    if (unserializable === false) {
        return;
    }
    var unserializablePath = unserializable.path.join('.');
    var error = new Error("Detected unserializable " + context + " at \"" + unserializablePath + "\"");
    error.value = unserializable.value;
    error.unserializablePath = unserializablePath;
    throw error;
}
/**
 * Object Utilities
 */
export function isUndefined(target) {
    return target === undefined;
}
export function isNull(target) {
    return target === null;
}
export function isArray(target) {
    return Array.isArray(target);
}
export function isString(target) {
    return typeof target === 'string';
}
export function isBoolean(target) {
    return typeof target === 'boolean';
}
export function isNumber(target) {
    return typeof target === 'number';
}
export function isObjectLike(target) {
    return typeof target === 'object' && target !== null;
}
export function isObject(target) {
    return isObjectLike(target) && !isArray(target);
}
export function isPlainObject(target) {
    if (!isObject(target)) {
        return false;
    }
    var targetPrototype = Object.getPrototypeOf(target);
    return targetPrototype === Object.prototype || targetPrototype === null;
}
export function isFunction(target) {
    return typeof target === 'function';
}
export function hasOwnProperty(target, propertyName) {
    return Object.prototype.hasOwnProperty.call(target, propertyName);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9tb2R1bGVzL3N0b3JlL3NyYy9tZXRhLXJlZHVjZXJzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLFVBQVUsaUJBQWlCLENBQy9CLE1BQVksRUFDWixJQUFtQjtJQUFuQixxQkFBQSxFQUFBLFNBQW1CO0lBRW5CLDBFQUEwRTtJQUMxRSxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQ2hFLE9BQU87WUFDTCxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUM7WUFDZCxLQUFLLEVBQUUsTUFBTTtTQUNkLENBQUM7S0FDSDtJQUVELElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUF5QyxVQUFDLE1BQU0sRUFBRSxHQUFHO1FBQ3JFLElBQUksTUFBTSxFQUFFO1lBQ1YsT0FBTyxNQUFNLENBQUM7U0FDZjtRQUVELElBQU0sS0FBSyxHQUFJLE1BQWMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVuQyxJQUNFLFdBQVcsQ0FBQyxLQUFLLENBQUM7WUFDbEIsTUFBTSxDQUFDLEtBQUssQ0FBQztZQUNiLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDZixTQUFTLENBQUMsS0FBSyxDQUFDO1lBQ2hCLFFBQVEsQ0FBQyxLQUFLLENBQUM7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ2Q7WUFDQSxPQUFPLEtBQUssQ0FBQztTQUNkO1FBRUQsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDeEIsT0FBTyxpQkFBaUIsQ0FBQyxLQUFLLG1CQUFNLElBQUksR0FBRSxHQUFHLEdBQUUsQ0FBQztTQUNqRDtRQUVELE9BQU87WUFDTCxJQUFJLG1CQUFNLElBQUksR0FBRSxHQUFHLEVBQUM7WUFDcEIsS0FBSyxPQUFBO1NBQ04sQ0FBQztJQUNKLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNaLENBQUM7QUFFRCxNQUFNLFVBQVUscUJBQXFCLENBQ25DLGNBQXNELEVBQ3RELE9BQTJCO0lBRTNCLElBQUksY0FBYyxLQUFLLEtBQUssRUFBRTtRQUM1QixPQUFPO0tBQ1I7SUFFRCxJQUFNLGtCQUFrQixHQUFHLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3pELElBQU0sS0FBSyxHQUFRLElBQUksS0FBSyxDQUMxQiw2QkFBMkIsT0FBTyxjQUFRLGtCQUFrQixPQUFHLENBQ2hFLENBQUM7SUFDRixLQUFLLENBQUMsS0FBSyxHQUFHLGNBQWMsQ0FBQyxLQUFLLENBQUM7SUFDbkMsS0FBSyxDQUFDLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0lBQzlDLE1BQU0sS0FBSyxDQUFDO0FBQ2QsQ0FBQztBQUVEOztHQUVHO0FBRUgsTUFBTSxVQUFVLFdBQVcsQ0FBQyxNQUFXO0lBQ3JDLE9BQU8sTUFBTSxLQUFLLFNBQVMsQ0FBQztBQUM5QixDQUFDO0FBRUQsTUFBTSxVQUFVLE1BQU0sQ0FBQyxNQUFXO0lBQ2hDLE9BQU8sTUFBTSxLQUFLLElBQUksQ0FBQztBQUN6QixDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBQyxNQUFXO0lBQ2pDLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQixDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxNQUFXO0lBQ2xDLE9BQU8sT0FBTyxNQUFNLEtBQUssUUFBUSxDQUFDO0FBQ3BDLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUyxDQUFDLE1BQVc7SUFDbkMsT0FBTyxPQUFPLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBVztJQUNsQyxPQUFPLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQztBQUNwQyxDQUFDO0FBRUQsTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXO0lBQ3RDLE9BQU8sT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLENBQUM7QUFDdkQsQ0FBQztBQUVELE1BQU0sVUFBVSxRQUFRLENBQUMsTUFBVztJQUNsQyxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUNsRCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxNQUFXO0lBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQUU7UUFDckIsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELElBQU0sZUFBZSxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDdEQsT0FBTyxlQUFlLEtBQUssTUFBTSxDQUFDLFNBQVMsSUFBSSxlQUFlLEtBQUssSUFBSSxDQUFDO0FBQzFFLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLE1BQVc7SUFDcEMsT0FBTyxPQUFPLE1BQU0sS0FBSyxVQUFVLENBQUM7QUFDdEMsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsTUFBYyxFQUFFLFlBQW9CO0lBQ2pFLE9BQU8sTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNwRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGdldFVuc2VyaWFsaXphYmxlKFxuICB0YXJnZXQ/OiBhbnksXG4gIHBhdGg6IHN0cmluZ1tdID0gW11cbik6IGZhbHNlIHwgeyBwYXRoOiBzdHJpbmdbXTsgdmFsdWU6IGFueSB9IHtcbiAgLy8gR3VhcmQgYWdhaW5zdCB1bmRlZmluZWQgYW5kIG51bGwsIGUuZy4gYSByZWR1Y2VyIHRoYXQgcmV0dXJucyB1bmRlZmluZWRcbiAgaWYgKChpc1VuZGVmaW5lZCh0YXJnZXQpIHx8IGlzTnVsbCh0YXJnZXQpKSAmJiBwYXRoLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBbJ3Jvb3QnXSxcbiAgICAgIHZhbHVlOiB0YXJnZXQsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICByZXR1cm4ga2V5cy5yZWR1Y2U8ZmFsc2UgfCB7IHBhdGg6IHN0cmluZ1tdOyB2YWx1ZTogYW55IH0+KChyZXN1bHQsIGtleSkgPT4ge1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgY29uc3QgdmFsdWUgPSAodGFyZ2V0IGFzIGFueSlba2V5XTtcblxuICAgIGlmIChcbiAgICAgIGlzVW5kZWZpbmVkKHZhbHVlKSB8fFxuICAgICAgaXNOdWxsKHZhbHVlKSB8fFxuICAgICAgaXNOdW1iZXIodmFsdWUpIHx8XG4gICAgICBpc0Jvb2xlYW4odmFsdWUpIHx8XG4gICAgICBpc1N0cmluZyh2YWx1ZSkgfHxcbiAgICAgIGlzQXJyYXkodmFsdWUpXG4gICAgKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZ2V0VW5zZXJpYWxpemFibGUodmFsdWUsIFsuLi5wYXRoLCBrZXldKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0aDogWy4uLnBhdGgsIGtleV0sXG4gICAgICB2YWx1ZSxcbiAgICB9O1xuICB9LCBmYWxzZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0aHJvd0lmVW5zZXJpYWxpemFibGUoXG4gIHVuc2VyaWFsaXphYmxlOiBmYWxzZSB8IHsgcGF0aDogc3RyaW5nW107IHZhbHVlOiBhbnkgfSxcbiAgY29udGV4dDogJ3N0YXRlJyB8ICdhY3Rpb24nXG4pIHtcbiAgaWYgKHVuc2VyaWFsaXphYmxlID09PSBmYWxzZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHVuc2VyaWFsaXphYmxlUGF0aCA9IHVuc2VyaWFsaXphYmxlLnBhdGguam9pbignLicpO1xuICBjb25zdCBlcnJvcjogYW55ID0gbmV3IEVycm9yKFxuICAgIGBEZXRlY3RlZCB1bnNlcmlhbGl6YWJsZSAke2NvbnRleHR9IGF0IFwiJHt1bnNlcmlhbGl6YWJsZVBhdGh9XCJgXG4gICk7XG4gIGVycm9yLnZhbHVlID0gdW5zZXJpYWxpemFibGUudmFsdWU7XG4gIGVycm9yLnVuc2VyaWFsaXphYmxlUGF0aCA9IHVuc2VyaWFsaXphYmxlUGF0aDtcbiAgdGhyb3cgZXJyb3I7XG59XG5cbi8qKlxuICogT2JqZWN0IFV0aWxpdGllc1xuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VuZGVmaW5lZCh0YXJnZXQ6IGFueSk6IHRhcmdldCBpcyB1bmRlZmluZWQge1xuICByZXR1cm4gdGFyZ2V0ID09PSB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bGwodGFyZ2V0OiBhbnkpOiB0YXJnZXQgaXMgbnVsbCB7XG4gIHJldHVybiB0YXJnZXQgPT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0FycmF5KHRhcmdldDogYW55KTogdGFyZ2V0IGlzIEFycmF5PGFueT4ge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodGFyZ2V0OiBhbnkpOiB0YXJnZXQgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKHRhcmdldDogYW55KTogdGFyZ2V0IGlzIGJvb2xlYW4ge1xuICByZXR1cm4gdHlwZW9mIHRhcmdldCA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdW1iZXIodGFyZ2V0OiBhbnkpOiB0YXJnZXQgaXMgbnVtYmVyIHtcbiAgcmV0dXJuIHR5cGVvZiB0YXJnZXQgPT09ICdudW1iZXInO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNPYmplY3RMaWtlKHRhcmdldDogYW55KTogdGFyZ2V0IGlzIG9iamVjdCB7XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0JyAmJiB0YXJnZXQgIT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh0YXJnZXQ6IGFueSk6IHRhcmdldCBpcyBvYmplY3Qge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHRhcmdldCkgJiYgIWlzQXJyYXkodGFyZ2V0KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodGFyZ2V0OiBhbnkpOiB0YXJnZXQgaXMgb2JqZWN0IHtcbiAgaWYgKCFpc09iamVjdCh0YXJnZXQpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3QgdGFyZ2V0UHJvdG90eXBlID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCk7XG4gIHJldHVybiB0YXJnZXRQcm90b3R5cGUgPT09IE9iamVjdC5wcm90b3R5cGUgfHwgdGFyZ2V0UHJvdG90eXBlID09PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbih0YXJnZXQ6IGFueSk6IHRhcmdldCBpcyBGdW5jdGlvbiB7XG4gIHJldHVybiB0eXBlb2YgdGFyZ2V0ID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzT3duUHJvcGVydHkodGFyZ2V0OiBvYmplY3QsIHByb3BlcnR5TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGFyZ2V0LCBwcm9wZXJ0eU5hbWUpO1xufVxuIl19