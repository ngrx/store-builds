import { __assign, __read } from "tslib";
import { isDevMode } from '@angular/core';
import { serializationCheckMetaReducer, immutabilityCheckMetaReducer, inNgZoneAssertMetaReducer, } from './meta-reducers';
import { _USER_RUNTIME_CHECKS, _ACTIVE_RUNTIME_CHECKS, META_REDUCERS, USER_RUNTIME_CHECKS, _ACTION_TYPE_UNIQUENESS_CHECK, } from './tokens';
import { REGISTERED_ACTION_TYPES } from './globals';
import { RUNTIME_CHECK_URL } from './meta-reducers/utils';
export function createActiveRuntimeChecks(runtimeChecks) {
    if (isDevMode()) {
        return __assign({ strictStateSerializability: false, strictActionSerializability: false, strictStateImmutability: true, strictActionImmutability: true, strictActionWithinNgZone: false, strictActionTypeUniqueness: false }, runtimeChecks);
    }
    return {
        strictStateSerializability: false,
        strictActionSerializability: false,
        strictStateImmutability: false,
        strictActionImmutability: false,
        strictActionWithinNgZone: false,
        strictActionTypeUniqueness: false,
    };
}
export function createSerializationCheckMetaReducer(_a) {
    var strictActionSerializability = _a.strictActionSerializability, strictStateSerializability = _a.strictStateSerializability;
    return function (reducer) {
        return strictActionSerializability || strictStateSerializability
            ? serializationCheckMetaReducer(reducer, {
                action: function (action) {
                    return strictActionSerializability && !ignoreNgrxAction(action);
                },
                state: function () { return strictStateSerializability; },
            })
            : reducer;
    };
}
export function createImmutabilityCheckMetaReducer(_a) {
    var strictActionImmutability = _a.strictActionImmutability, strictStateImmutability = _a.strictStateImmutability;
    return function (reducer) {
        return strictActionImmutability || strictStateImmutability
            ? immutabilityCheckMetaReducer(reducer, {
                action: function (action) {
                    return strictActionImmutability && !ignoreNgrxAction(action);
                },
                state: function () { return strictStateImmutability; },
            })
            : reducer;
    };
}
function ignoreNgrxAction(action) {
    return action.type.startsWith('@ngrx');
}
export function createInNgZoneCheckMetaReducer(_a) {
    var strictActionWithinNgZone = _a.strictActionWithinNgZone;
    return function (reducer) {
        return strictActionWithinNgZone
            ? inNgZoneAssertMetaReducer(reducer, {
                action: function (action) {
                    return strictActionWithinNgZone && !ignoreNgrxAction(action);
                },
            })
            : reducer;
    };
}
export function provideRuntimeChecks(runtimeChecks) {
    return [
        {
            provide: _USER_RUNTIME_CHECKS,
            useValue: runtimeChecks,
        },
        {
            provide: USER_RUNTIME_CHECKS,
            useFactory: _runtimeChecksFactory,
            deps: [_USER_RUNTIME_CHECKS],
        },
        {
            provide: _ACTIVE_RUNTIME_CHECKS,
            deps: [USER_RUNTIME_CHECKS],
            useFactory: createActiveRuntimeChecks,
        },
        {
            provide: META_REDUCERS,
            multi: true,
            deps: [_ACTIVE_RUNTIME_CHECKS],
            useFactory: createImmutabilityCheckMetaReducer,
        },
        {
            provide: META_REDUCERS,
            multi: true,
            deps: [_ACTIVE_RUNTIME_CHECKS],
            useFactory: createSerializationCheckMetaReducer,
        },
        {
            provide: META_REDUCERS,
            multi: true,
            deps: [_ACTIVE_RUNTIME_CHECKS],
            useFactory: createInNgZoneCheckMetaReducer,
        },
    ];
}
export function checkForActionTypeUniqueness() {
    return [
        {
            provide: _ACTION_TYPE_UNIQUENESS_CHECK,
            multi: true,
            deps: [_ACTIVE_RUNTIME_CHECKS],
            useFactory: _actionTypeUniquenessCheck,
        },
    ];
}
export function _runtimeChecksFactory(runtimeChecks) {
    return runtimeChecks;
}
export function _actionTypeUniquenessCheck(config) {
    if (!config.strictActionTypeUniqueness) {
        return;
    }
    var duplicates = Object.entries(REGISTERED_ACTION_TYPES)
        .filter(function (_a) {
        var _b = __read(_a, 2), registrations = _b[1];
        return registrations > 1;
    })
        .map(function (_a) {
        var _b = __read(_a, 1), type = _b[0];
        return type;
    });
    if (duplicates.length) {
        throw new Error("Action types are registered more than once, " + duplicates
            .map(function (type) { return "\"" + type + "\""; })
            .join(', ') + ". " + RUNTIME_CHECK_URL + "#strictactiontypeuniqueness");
    }
}
//# sourceMappingURL=data:application/json;base64,