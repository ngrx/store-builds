{"version":3,"file":"testing.js","sources":["../../../../../../modules/store/testing/src/mock_state.ts","../../../../../../modules/store/testing/src/tokens.ts","../../../../../../modules/store/testing/src/mock_store.ts","../../../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../../../modules/store/testing/src/testing.ts","../../../../../../modules/store/testing/testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const store = TestBed.get(Store) as MockStore<any>;\n      if (store && 'resetSelectors' in store) {\n        store.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\n@Injectable()\nexport class MockStore<T> extends Store<T> {\n  static selectors = new Map<\n    | string\n    | MemoizedSelector<any, any>\n    | MemoizedSelectorWithProps<any, any, any>,\n    any\n  >();\n\n  public scannedActions$: Observable<Action>;\n  private lastState: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors?: MockSelector[]\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    if (mockSelectors) {\n      mockSelectors.forEach(mockSelector => {\n        const selector = mockSelector.selector;\n        if (typeof selector === 'string') {\n          this.overrideSelector(selector, mockSelector.value);\n        } else {\n          this.overrideSelector(selector, mockSelector.value);\n        }\n      });\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<T, Result>(\n    selector: string,\n    value: Result\n  ): MemoizedSelector<string, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelector<T, Result>,\n    value: Result\n  ): MemoizedSelector<T, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelectorWithProps<T, any, Result>,\n    value: Result\n  ): MemoizedSelectorWithProps<T, any, Result>;\n  overrideSelector<T, Result>(\n    selector:\n      | string\n      | MemoizedSelector<any, any>\n      | MemoizedSelectorWithProps<any, any, any>,\n    value: any\n  ) {\n    MockStore.selectors.set(selector, value);\n\n    if (typeof selector === 'string') {\n      const stringSelector = createSelector(() => {}, () => value);\n\n      return stringSelector;\n    }\n\n    selector.setResult(value);\n\n    return selector;\n  }\n\n  resetSelectors() {\n    MockStore.selectors.forEach((_, selector) => {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.setResult();\n      }\n    });\n\n    MockStore.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && MockStore.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        MockStore.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    this.setState({ ...(this.lastState as T) });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n  \n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  return [\n    ActionsSubject,\n    MockState,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useClass: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"],"names":["tslib_1.__extends","tslib_1.__param"],"mappings":"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"}