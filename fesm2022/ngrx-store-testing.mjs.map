{
  "version": 3,
  "sources": ["../../../../modules/store/testing/src/mock_state.ts", "../../../../modules/store/testing/src/tokens.ts", "../../../../modules/store/testing/src/mock_store.ts", "../../../../modules/store/testing/src/mock_reducer_manager.ts", "../../../../modules/store/testing/src/testing.ts"],
  "sourcesContent": ["import { Injectable, Signal } from '@angular/core';\nimport { toSignal } from '@angular/core/rxjs-interop';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T> extends BehaviorSubject<T> {\n  /**\n   * @internal\n   */\n  readonly state: Signal<T>;\n\n  constructor() {\n    super(<T>{});\n\n    this.state = toSignal(this, { manualCleanup: true, requireSync: true });\n  }\n}\n", "import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n", "import { Inject, Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n  ? MemoizedSelectorWithProps<any, any, Result>\n  : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n      ? U\n      : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(\n            () => {},\n            (): Result => value\n          )\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  override select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  override addReducer() {\n    /* noop */\n  }\n\n  override removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n\n  removeFeature(feature: any) {\n    /* noop */\n  }\n\n  removeFeatures(features: any) {\n    /* noop */\n  }\n\n  addReducer(key: any, reducer: any) {\n    /* noop */\n  }\n\n  addReducers(reducers: any) {\n    /* noop */\n  }\n\n  removeReducer(featureKey: any) {\n    /* noop */\n  }\n\n  removeReducers(featureKeys: any) {\n    /* noop */\n  }\n}\n", "import {\n  ExistingProvider,\n  FactoryProvider,\n  Injector,\n  ValueProvider,\n} from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\n/**\n * @description\n * Creates mock store providers.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns Mock store providers that can be used with both `TestBed.configureTestingModule` and `Injector.create`.\n *\n * @usageNotes\n *\n * **With `TestBed.configureTestingModule`**\n *\n * ```typescript\n * describe('Books Component', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     TestBed.configureTestingModule({\n *       providers: [\n *         provideMockStore({\n *           initialState: { books: { entities: [] } },\n *           selectors: [\n *             { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *             { selector: selectVisibleBooks, value: ['Book 1'] },\n *           ],\n *         }),\n *       ],\n *     });\n *\n *     store = TestBed.inject(MockStore);\n *   });\n * });\n * ```\n *\n * **With `Injector.create`**\n *\n * ```typescript\n * describe('Counter Component', () => {\n *   let injector: Injector;\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     injector = Injector.create({\n *       providers: [\n *         provideMockStore({ initialState: { counter: 0 } }),\n *       ],\n *     });\n *     store = injector.get(MockStore);\n *   });\n * });\n * ```\n */\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): (ValueProvider | ExistingProvider | FactoryProvider)[] {\n  setNgrxMockEnvironment(true);\n  return [\n    {\n      provide: ActionsSubject,\n      useFactory: () => new ActionsSubject(),\n      deps: [],\n    },\n    { provide: MockState, useFactory: () => new MockState<T>(), deps: [] },\n    {\n      provide: MockReducerManager,\n      useFactory: () => new MockReducerManager(),\n      deps: [],\n    },\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useExisting: MockState },\n    { provide: ReducerManager, useExisting: MockReducerManager },\n    {\n      provide: MockStore,\n      useFactory: mockStoreFactory,\n      deps: [\n        MockState,\n        ActionsSubject,\n        ReducerManager,\n        INITIAL_STATE,\n        MOCK_SELECTORS,\n      ],\n    },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nfunction mockStoreFactory<T>(\n  mockState: MockState<T>,\n  actionsSubject: ActionsSubject,\n  reducerManager: ReducerManager,\n  initialState: T,\n  mockSelectors: MockSelector[]\n): MockStore<T> {\n  return new MockStore(\n    mockState,\n    actionsSubject,\n    reducerManager,\n    initialState,\n    mockSelectors\n  );\n}\n\n/**\n * @description\n * Creates mock store with all necessary dependencies outside of the `TestBed`.\n *\n * @param config `MockStoreConfig<T>` to provide the values for `INITIAL_STATE` and `MOCK_SELECTORS` tokens.\n * By default, `initialState` and `selectors` are not defined.\n * @returns `MockStore<T>`\n *\n * @usageNotes\n *\n * ```typescript\n * describe('Books Effects', () => {\n *   let store: MockStore;\n *\n *   beforeEach(() => {\n *     store = createMockStore({\n *       initialState: { books: { entities: ['Book 1', 'Book 2', 'Book 3'] } },\n *       selectors: [\n *         { selector: selectAllBooks, value: ['Book 1', 'Book 2'] },\n *         { selector: selectVisibleBooks, value: ['Book 1'] },\n *       ],\n *     });\n *   });\n * });\n * ```\n */\nexport function createMockStore<T>(\n  config: MockStoreConfig<T> = {}\n): MockStore<T> {\n  const injector = Injector.create({ providers: provideMockStore(config) });\n  return injector.get(MockStore);\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n"],
  "mappings": "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",
  "names": ["Injectable", "BehaviorSubject", "Injectable", "BehaviorSubject", "ActionsSubject", "INITIAL_STATE", "ReducerManager", "Store"]
}
