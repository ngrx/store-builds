{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../../modules/store/schematics/ng-add/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ts from 'typescript';\nimport { Path, dirname } from '@angular-devkit/core';\nimport {\n  Rule,\n  SchematicContext,\n  SchematicsException,\n  Tree,\n  apply,\n  applyTemplates,\n  branchAndMerge,\n  chain,\n  mergeWith,\n  url,\n  noop,\n  move,\n  filter,\n} from '@angular-devkit/schematics';\nimport { NodePackageInstallTask } from '@angular-devkit/schematics/tasks';\nimport {\n  InsertChange,\n  addImportToModule,\n  buildRelativePath,\n  findModuleFromOptions,\n  getProjectPath,\n  insertImport,\n  stringUtils,\n  addPackageToPackageJson,\n  platformVersion,\n  parseName,\n} from '../../schematics-core';\nimport { Schema as RootStoreOptions } from './schema';\n\nfunction addImportToNgModule(options: RootStoreOptions): Rule {\n  return (host: Tree) => {\n    const modulePath = options.module;\n\n    if (!modulePath) {\n      return host;\n    }\n\n    if (!host.exists(modulePath)) {\n      throw new Error('Specified module does not exist');\n    }\n\n    const text = host.read(modulePath);\n    if (text === null) {\n      throw new SchematicsException(`File ${modulePath} does not exist.`);\n    }\n    const sourceText = text.toString('utf-8');\n\n    const source = ts.createSourceFile(\n      modulePath,\n      sourceText,\n      ts.ScriptTarget.Latest,\n      true\n    );\n\n    const storeModuleReducers = options.minimal ? `{}` : `reducers`;\n\n    const storeModuleConfig = options.minimal\n      ? `{}`\n      : `{\n      metaReducers\n    }`;\n    const storeModuleSetup = `StoreModule.forRoot(${storeModuleReducers}, ${storeModuleConfig})`;\n\n    const statePath = `/${options.path}/${options.statePath}`;\n    const relativePath = buildRelativePath(modulePath, statePath);\n    const [storeNgModuleImport] = addImportToModule(\n      source,\n      modulePath,\n      storeModuleSetup,\n      relativePath\n    );\n\n    let changes = [\n      insertImport(source, modulePath, 'StoreModule', '@ngrx/store'),\n      storeNgModuleImport,\n    ];\n\n    if (!options.minimal) {\n      changes = changes.concat([\n        insertImport(\n          source,\n          modulePath,\n          'reducers, metaReducers',\n          relativePath\n        ),\n      ]);\n    }\n\n    const recorder = host.beginUpdate(modulePath);\n\n    for (const change of changes) {\n      if (change instanceof InsertChange) {\n        recorder.insertLeft(change.pos, change.toAdd);\n      }\n    }\n    host.commitUpdate(recorder);\n\n    return host;\n  };\n}\n\nfunction addNgRxStoreToPackageJson() {\n  return (host: Tree, context: SchematicContext) => {\n    addPackageToPackageJson(\n      host,\n      'dependencies',\n      '@ngrx/store',\n      platformVersion\n    );\n    context.addTask(new NodePackageInstallTask());\n    return host;\n  };\n}\n\nfunction addNgRxESLintPlugin() {\n  return (host: Tree, context: SchematicContext) => {\n    const eslintConfigPath = '.eslintrc.json';\n    const docs =\n      'https://github.com/timdeschryver/eslint-plugin-ngrx/#eslint-plugin-ngrx';\n\n    const eslint = host.read(eslintConfigPath)?.toString('utf-8');\n    if (!eslint) {\n      return host;\n    }\n\n    addPackageToPackageJson(\n      host,\n      'devDependencies',\n      'eslint-plugin-ngrx',\n      '^1.0.0'\n    );\n    context.addTask(new NodePackageInstallTask());\n\n    try {\n      const json = JSON.parse(eslint);\n      if (json.overrides) {\n        json.overrides\n          .filter((override: { files?: string[] }) =>\n            override.files?.some((file: string) => file.endsWith('*.ts'))\n          )\n          .forEach(configureESLintPlugin);\n      } else {\n        configureESLintPlugin(json);\n      }\n\n      host.overwrite(eslintConfigPath, JSON.stringify(json, null, 2));\n\n      context.logger.info(`\nThe NgRx ESLint Plugin is installed and configured with the recommended config.\n\nIf you want to change the configuration, please see ${docs}.\n`);\n      return host;\n    } catch (err) {\n      context.logger.warn(`\nSomething went wrong while adding the NgRx ESLint Plugin.\nThe NgRx ESLint Plugin is installed but not configured.\n\nPlease see ${docs} to configure the NgRx ESLint Plugin.\n\nDetails:\n${err.message}\n`);\n    }\n\n    return host;\n  };\n}\n\nfunction configureESLintPlugin(json: any): void {\n  json.plugins = [...(json.plugins || []), 'ngrx'];\n  json.extends = [...(json.extends || []), 'plugin:ngrx/recommended'];\n}\n\nexport default function (options: RootStoreOptions): Rule {\n  return (host: Tree, context: SchematicContext) => {\n    options.path = getProjectPath(host, options);\n\n    const parsedPath = parseName(options.path, '');\n    options.path = parsedPath.path;\n\n    const statePath = `/${options.path}/${options.statePath}/index.ts`;\n    const srcPath = dirname(options.path as Path);\n    const environmentsPath = buildRelativePath(\n      statePath,\n      `/${srcPath}/environments/environment`\n    );\n\n    if (options.module) {\n      options.module = findModuleFromOptions(host, {\n        name: '',\n        module: options.module,\n        path: options.path,\n      });\n    }\n\n    if (options.stateInterface && options.stateInterface !== 'State') {\n      options.stateInterface = stringUtils.classify(options.stateInterface);\n    }\n\n    const templateSource = apply(url('./files'), [\n      filter(() => (options.minimal ? false : true)),\n      applyTemplates({\n        ...stringUtils,\n        ...options,\n        environmentsPath,\n      }),\n      move(parsedPath.path),\n    ]);\n\n    return chain([\n      branchAndMerge(\n        chain([addImportToNgModule(options), mergeWith(templateSource)])\n      ),\n      options && options.skipPackageJson ? noop() : addNgRxStoreToPackageJson(),\n      options && options.skipESLintPlugin ? noop() : addNgRxESLintPlugin(),\n    ])(host, context);\n  };\n}\n"]}