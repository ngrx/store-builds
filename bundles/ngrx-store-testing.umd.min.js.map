{"version":3,"sources":["ng://@ngrx/store/testing/mock_state.ts","ng://@ngrx/store/testing/tokens.ts","ng://@ngrx/store/testing/mock_store.ts","ng://@ngrx/store/testing/mock_reducer_manager.ts","ng://@ngrx/store/testing/testing.ts"],"names":["MockState","_super","call","this","__extends","Injectable","BehaviorSubject","MOCK_SELECTORS","InjectionToken","afterEach","mockStore","TestBed","inject","MockStore","resetSelectors","_a","state$","actionsObserver","reducerManager","initialState","mockSelectors","_this","selectors","Map","setState","scannedActions$","asObservable","mockSelectors_1","__values","mockSelectors_1_1","next","done","mockSelector","value","overrideSelector","selector","prototype","nextState","lastState","set","resultSelector","createSelector","setResult","_b","keys","_c","release","clearResult","clear","select","prop","has","get","addReducer","removeReducer","refreshState","__assign","ActionsSubject","ReducerManager","Inject","args","INITIAL_STATE","Store","MockReducerManager","addFeature","feature","addFeatures","config","setNgrxMockEnvironment","provide","useValue","StateObservable","useClass","useExisting"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n    ? MemoizedSelectorWithProps<any, any, Result>\n    : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n        ? U\n        : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(() => {}, (): Result => value)\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  setNgrxMockEnvironment(true);\n  return [\n    ActionsSubject,\n    MockState,\n    MockStore,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n"]}