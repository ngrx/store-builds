{"version":3,"file":"store-testing.umd.js","sources":["../../../../../../modules/store/testing/src/mock_state.ts","../../../../../../modules/store/testing/src/tokens.ts","../../../../../../modules/store/testing/src/mock_store.ts","../../../../../../modules/store/testing/src/mock_reducer_manager.ts","../../../../../../modules/store/testing/src/testing.ts","../../../../../../modules/store/testing/testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const store = TestBed.get(Store) as MockStore<any>;\n      if (store && 'resetSelectors' in store) {\n        store.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\n@Injectable()\nexport class MockStore<T> extends Store<T> {\n  static selectors = new Map<\n    | string\n    | MemoizedSelector<any, any>\n    | MemoizedSelectorWithProps<any, any, any>,\n    any\n  >();\n\n  public scannedActions$: Observable<Action>;\n  private lastState: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors?: MockSelector[]\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    if (mockSelectors) {\n      mockSelectors.forEach(mockSelector => {\n        const selector = mockSelector.selector;\n        if (typeof selector === 'string') {\n          this.overrideSelector(selector, mockSelector.value);\n        } else {\n          this.overrideSelector(selector, mockSelector.value);\n        }\n      });\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<T, Result>(\n    selector: string,\n    value: Result\n  ): MemoizedSelector<string, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelector<T, Result>,\n    value: Result\n  ): MemoizedSelector<T, Result>;\n  overrideSelector<T, Result>(\n    selector: MemoizedSelectorWithProps<T, any, Result>,\n    value: Result\n  ): MemoizedSelectorWithProps<T, any, Result>;\n  overrideSelector<T, Result>(\n    selector:\n      | string\n      | MemoizedSelector<any, any>\n      | MemoizedSelectorWithProps<any, any, any>,\n    value: any\n  ) {\n    MockStore.selectors.set(selector, value);\n\n    if (typeof selector === 'string') {\n      const stringSelector = createSelector(() => {}, () => value);\n\n      return stringSelector;\n    }\n\n    selector.setResult(value);\n\n    return selector;\n  }\n\n  resetSelectors() {\n    MockStore.selectors.forEach((_, selector) => {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.setResult();\n      }\n    });\n\n    MockStore.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && MockStore.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        MockStore.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    this.setState({ ...(this.lastState as T) });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n  \n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  return [\n    ActionsSubject,\n    MockState,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useClass: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {MOCK_SELECTORS as Éµngrx_modules_store_testing_testing_a} from './src/tokens';"],"names":["tslib_1.__extends","Injectable","BehaviorSubject","InjectionToken","store","TestBed","Store","createSelector","tslib_1.__param","Inject","INITIAL_STATE","ActionsSubject","ReducerManager","StateObservable"],"mappings":"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"}