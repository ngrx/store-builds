{"version":3,"file":"ngrx-store-testing.umd.js","sources":["ng://@ngrx/store/testing/mock_state.ts","ng://@ngrx/store/testing/tokens.ts","ng://@ngrx/store/testing/mock_store.ts","ng://@ngrx/store/testing/mock_reducer_manager.ts","ng://@ngrx/store/testing/testing.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MockState<T extends {}> extends BehaviorSubject<T> {\n  constructor() {\n    super(<T>{});\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const MOCK_SELECTORS = new InjectionToken('@ngrx/store Mock Selectors');\n","import { Inject, Injectable } from '@angular/core';\nimport { TestBed } from '@angular/core/testing';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  Action,\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  Store,\n  createSelector,\n  MemoizedSelectorWithProps,\n  MemoizedSelector,\n} from '@ngrx/store';\nimport { MockState } from './mock_state';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nif (typeof afterEach === 'function') {\n  afterEach(() => {\n    try {\n      const mockStore: MockStore | undefined = TestBed.inject(MockStore);\n      if (mockStore) {\n        mockStore.resetSelectors();\n      }\n    } catch {}\n  });\n}\n\ntype OnlyMemoized<T, Result> = T extends string | MemoizedSelector<any, any>\n  ? MemoizedSelector<any, Result>\n  : T extends MemoizedSelectorWithProps<any, any, any>\n    ? MemoizedSelectorWithProps<any, any, Result>\n    : never;\n\ntype Memoized<Result> =\n  | MemoizedSelector<any, Result>\n  | MemoizedSelectorWithProps<any, any, Result>;\n\n@Injectable()\nexport class MockStore<T = object> extends Store<T> {\n  private readonly selectors = new Map<Memoized<any> | string, any>();\n\n  readonly scannedActions$: Observable<Action>;\n  private lastState?: T;\n\n  constructor(\n    private state$: MockState<T>,\n    actionsObserver: ActionsSubject,\n    reducerManager: ReducerManager,\n    @Inject(INITIAL_STATE) private initialState: T,\n    @Inject(MOCK_SELECTORS) mockSelectors: MockSelector[] = []\n  ) {\n    super(state$, actionsObserver, reducerManager);\n    this.resetSelectors();\n    this.setState(this.initialState);\n    this.scannedActions$ = actionsObserver.asObservable();\n    for (const mockSelector of mockSelectors) {\n      this.overrideSelector(mockSelector.selector, mockSelector.value);\n    }\n  }\n\n  setState(nextState: T): void {\n    this.state$.next(nextState);\n    this.lastState = nextState;\n  }\n\n  overrideSelector<\n    Selector extends Memoized<Result>,\n    Value extends Result,\n    Result = Selector extends MemoizedSelector<any, infer T>\n      ? T\n      : Selector extends MemoizedSelectorWithProps<any, any, infer U>\n        ? U\n        : Value\n  >(\n    selector: Selector | string,\n    value: Value\n  ): OnlyMemoized<typeof selector, Result> {\n    this.selectors.set(selector, value);\n\n    const resultSelector: Memoized<Result> =\n      typeof selector === 'string'\n        ? createSelector(() => {}, (): Result => value)\n        : selector;\n\n    resultSelector.setResult(value);\n\n    return resultSelector as OnlyMemoized<typeof selector, Result>;\n  }\n\n  resetSelectors() {\n    for (const selector of this.selectors.keys()) {\n      if (typeof selector !== 'string') {\n        selector.release();\n        selector.clearResult();\n      }\n    }\n\n    this.selectors.clear();\n  }\n\n  select(selector: any, prop?: any) {\n    if (typeof selector === 'string' && this.selectors.has(selector)) {\n      return new BehaviorSubject<any>(\n        this.selectors.get(selector)\n      ).asObservable();\n    }\n\n    return super.select(selector, prop);\n  }\n\n  addReducer() {\n    /* noop */\n  }\n\n  removeReducer() {\n    /* noop */\n  }\n\n  /**\n   * Refreshes the existing state.\n   */\n  refreshState() {\n    if (this.lastState) this.setState({ ...this.lastState });\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { ActionReducer } from '@ngrx/store';\n\n@Injectable()\nexport class MockReducerManager extends BehaviorSubject<\n  ActionReducer<any, any>\n> {\n  constructor() {\n    super(() => undefined);\n  }\n\n  addFeature(feature: any) {\n    /* noop */\n  }\n\n  addFeatures(feature: any) {\n    /* noop */\n  }\n}\n","import { Provider } from '@angular/core';\nimport { MockState } from './mock_state';\nimport {\n  ActionsSubject,\n  INITIAL_STATE,\n  ReducerManager,\n  StateObservable,\n  Store,\n  setNgrxMockEnvironment,\n} from '@ngrx/store';\nimport { MockStore } from './mock_store';\nimport { MockReducerManager } from './mock_reducer_manager';\nimport { MockSelector } from './mock_selector';\nimport { MOCK_SELECTORS } from './tokens';\n\nexport interface MockStoreConfig<T> {\n  initialState?: T;\n  selectors?: MockSelector[];\n}\n\nexport function provideMockStore<T = any>(\n  config: MockStoreConfig<T> = {}\n): Provider[] {\n  setNgrxMockEnvironment(true);\n  return [\n    ActionsSubject,\n    MockState,\n    MockStore,\n    { provide: INITIAL_STATE, useValue: config.initialState || {} },\n    { provide: MOCK_SELECTORS, useValue: config.selectors },\n    { provide: StateObservable, useClass: MockState },\n    { provide: ReducerManager, useClass: MockReducerManager },\n    { provide: Store, useExisting: MockStore },\n  ];\n}\n\nexport { MockReducerManager } from './mock_reducer_manager';\nexport { MockState } from './mock_state';\nexport { MockStore } from './mock_store';\nexport { MockSelector } from './mock_selector';\n"],"names":["Injectable","BehaviorSubject","InjectionToken","TestBed","__extends","createSelector","ActionsSubject","ReducerManager","Inject","INITIAL_STATE","Store","setNgrxMockEnvironment","StateObservable"],"mappings":"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"}