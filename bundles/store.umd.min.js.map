{"version":3,"sources":["../../../modules/store/src/utils.ts","../../../modules/store/src/state.ts","../../../modules/store/src/store_module.ts","../../../modules/store/src/selector.ts","../../../modules/store/src/tokens.ts","../../../modules/store/src/actions_subject.ts","../../../modules/store/src/reducer_manager.ts","../../../modules/store/src/scanned_actions_subject.ts","../../../modules/store/src/store.ts"],"names":["combineReducers","reducers","initialState","reducerKeys","Object","keys","finalReducers","i","length","key","finalReducerKeys","state","action","hasChanged","nextState","reducer","previousStateForKey","nextStateForKey","omit","object","keyToRemove","filter","reduce","result","assign","_a","compose","functions","_i","arguments","arg","last","slice","reduceRight","composed","fn","createReducerFactory","reducerFactory","metaReducers","Array","isArray","apply","concat","reduceState","stateActionPair","undefined","_createStoreReducers","tokenReducers","InjectionToken","_createFeatureReducers","reducerCollection","tokenReducerCollection","map","index","_initialStateFactory","memoize","t","reset","lastArguments","lastResult","memoized","createSelector","release","memoizedSelectors","forEach","selector","args","selectors","projector","createFeatureSelector","featureName","_INITIAL_STATE","INITIAL_STATE","REDUCER_FACTORY","_REDUCER_FACTORY","INITIAL_REDUCERS","_INITIAL_REDUCERS","META_REDUCERS","STORE_FEATURES","_STORE_REDUCERS","_FEATURE_REDUCERS","_FEATURE_REDUCERS_TOKEN","FEATURE_REDUCERS","INIT","ActionsSubject","_super","call","this","type","__extends","prototype","next","TypeError","complete","ngOnDestroy","BehaviorSubject","decorators","Injectable","ctorParameters","ACTIONS_SUBJECT_PROVIDERS","ReducerObservable","Observable","ReducerManagerDispatcher","UPDATE","ReducerManager","dispatcher","_this","addFeature","addReducer","removeFeature","removeReducer","updateReducers","Inject","REDUCER_MANAGER_PROVIDERS","provide","useExisting","ScannedActionsSubject","Subject","SCANNED_ACTIONS_SUBJECT_PROVIDERS","StateObservable","State","actions$","reducer$","scannedActions","actionsOnQueue$","observeOn","queue","withLatestReducer$","withLatestFrom","stateAndAction$","scan","stateSubscription","subscribe","unsubscribe","STATE_PROVIDERS","Store","state$","actionsObserver","reducerManager","source","select","pathOrMapFn","paths","mapped$","pluck","distinctUntilChanged","lift","operator","store","dispatch","error","err","STORE_PROVIDERS","StoreRootModule","scannedActions$","NgModule","StoreFeatureModule","features","featureReducers","feature","featureReducerCollection","shift","StoreModule","forRoot","config","ngModule","providers","useValue","useFactory","deps","Optional","forFeature","multi"],"mappings":"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","file":"./dist/store/bundles/store.umd.min.js","sourcesContent":["import {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n} from './models';\n\nexport function combineReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V>,\n  initialState?: Partial<T>\n): ActionReducer<T, V>;\n/**\n * @param {?} reducers\n * @param {?=} initialState\n * @return {?}\n */\nexport function combineReducers(\n  reducers: any,\n  initialState: any = {}\n): ActionReducer<any, Action> {\n  const /** @type {?} */ reducerKeys = Object.keys(reducers);\n  const /** @type {?} */ finalReducers: any = {};\n\n  for (let /** @type {?} */ i = 0; i < reducerKeys.length; i++) {\n    const /** @type {?} */ key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  const /** @type {?} */ finalReducerKeys = Object.keys(finalReducers);\n\n  return function combination(state = initialState, action) {\n    let /** @type {?} */ hasChanged = false;\n    const /** @type {?} */ nextState: any = {};\n    for (let /** @type {?} */ i = 0; i < finalReducerKeys.length; i++) {\n      const /** @type {?} */ key = finalReducerKeys[i];\n      const /** @type {?} */ reducer: any = finalReducers[key];\n      const /** @type {?} */ previousStateForKey = state[key];\n      const /** @type {?} */ nextStateForKey = reducer(previousStateForKey, action);\n\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n/**\n * @template T\n * @param {?} object\n * @param {?} keyToRemove\n * @return {?}\n */\nexport function omit<T extends { [key: string]: any }>(\n  object: T,\n  keyToRemove: keyof T\n): Partial<T> {\n  return Object.keys(object)\n    .filter(key => key !== keyToRemove)\n    .reduce((result, key) => Object.assign(result, { [key]: object[key] }), {});\n}\n\nexport function compose<A>(): (i: A) => A;\nexport function compose<A, B>(b: (i: A) => B): (i: A) => B;\nexport function compose<A, B, C>(c: (i: B) => C, b: (i: A) => B): (i: A) => C;\nexport function compose<A, B, C, D>(\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => D;\nexport function compose<A, B, C, D, E>(\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => E;\nexport function compose<A, B, C, D, E, F>(\n  f: (i: E) => F,\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => F;\n/**\n * @param {...?} functions\n * @return {?}\n */\nexport function compose(...functions: any[]) {\n  return function(arg: any) {\n    if (functions.length === 0) {\n      return arg;\n    }\n\n    const /** @type {?} */ last = functions[functions.length - 1];\n    const /** @type {?} */ rest = functions.slice(0, -1);\n\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\n/**\n * @param {?} reducerFactory\n * @param {?=} metaReducers\n * @return {?}\n */\nexport function createReducerFactory(\n  reducerFactory: ActionReducerFactory<any, any>,\n  metaReducers?: ActionReducer<any, any>[]\n): ActionReducerFactory<any, any> {\n  if (Array.isArray(metaReducers) && metaReducers.length > 0) {\n    return compose.apply(null, [...metaReducers, reducerFactory]);\n  }\n\n  return reducerFactory;\n}\n","import { Injectable, Inject, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { queue } from 'rxjs/scheduler/queue';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { withLatestFrom } from 'rxjs/operator/withLatestFrom';\nimport { scan } from 'rxjs/operator/scan';\nimport { ActionsSubject, INIT } from './actions_subject';\nimport { Action, ActionReducer } from './models';\nimport { INITIAL_STATE } from './tokens';\nimport { ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\n/**\n * @abstract\n */\nexport abstract class StateObservable extends Observable<any> {}\nexport class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = INIT;\nprivate stateSubscription: Subscription;\n/**\n * @param {?} actions$\n * @param {?} reducer$\n * @param {?} scannedActions\n * @param {?} initialState\n */\nconstructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions: ScannedActionsSubject,\n     initialState: any\n  ) {\n    super(initialState);\n\n    const actionsOnQueue$: Observable<Action> = observeOn.call(actions$, queue);\n    const withLatestReducer$: Observable<\n      [Action, ActionReducer<any, Action>]\n    > = withLatestFrom.call(actionsOnQueue$, reducer$);\n    const stateAndAction$: Observable<{\n      state: any;\n      action: Action;\n    }> = scan.call(withLatestReducer$, reduceState, initialState);\n\n    this.stateSubscription = stateAndAction$.subscribe({\n      next: ({ state, action }) => {\n        this.next(state);\n        scannedActions.next(action);\n      },\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ActionsSubject, },\n{type: ReducerObservable, },\n{type: ScannedActionsSubject, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n];\n}\n\nfunction State_tsickle_Closure_declarations() {\n/** @type {?} */\nState.INIT;\n/** @type {?} */\nState.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nState.ctorParameters;\n/** @type {?} */\nState.prototype.stateSubscription;\n}\n\n\nexport type StateActionPair<T, V extends Action = Action> = {\n  state: T | undefined;\n  action?: V;\n};\n/**\n * @template T, V\n * @param {?=} stateActionPair\n * @param {?=} __1\n * @return {?}\n */\nexport function reduceState<T, V extends Action = Action>(\n  stateActionPair: StateActionPair<T, V> = { state: undefined },\n  [action, reducer]: [V, ActionReducer<T, V>]\n): StateActionPair<T, V> {\n  const { state } = stateActionPair;\n  return { state: reducer(state, action), action };\n}\n\nexport const /** @type {?} */ STATE_PROVIDERS: Provider[] = [\n  State,\n  { provide: StateObservable, useExisting: State },\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import {\n  NgModule,\n  Inject,\n  ModuleWithProviders,\n  OnDestroy,\n  InjectionToken,\n  Optional,\n} from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n  StoreFeature,\n  InitialState,\n} from './models';\nimport { compose, combineReducers, createReducerFactory } from './utils';\nimport {\n  INITIAL_STATE,\n  INITIAL_REDUCERS,\n  _INITIAL_REDUCERS,\n  REDUCER_FACTORY,\n  _REDUCER_FACTORY,\n  STORE_FEATURES,\n  _INITIAL_STATE,\n  META_REDUCERS,\n  _STORE_REDUCERS,\n  FEATURE_REDUCERS,\n  _FEATURE_REDUCERS,\n  _FEATURE_REDUCERS_TOKEN,\n} from './tokens';\nimport { ACTIONS_SUBJECT_PROVIDERS, ActionsSubject } from './actions_subject';\nimport {\n  REDUCER_MANAGER_PROVIDERS,\n  ReducerManager,\n  ReducerObservable,\n} from './reducer_manager';\nimport {\n  SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n  ScannedActionsSubject,\n} from './scanned_actions_subject';\nimport { STATE_PROVIDERS } from './state';\nimport { STORE_PROVIDERS } from './store';\nexport class StoreRootModule {\n/**\n * @param {?} actions$\n * @param {?} reducer$\n * @param {?} scannedActions$\n */\nconstructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions$: ScannedActionsSubject\n  ) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ActionsSubject, },\n{type: ReducerObservable, },\n{type: ScannedActionsSubject, },\n];\n}\n\nfunction StoreRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRootModule.ctorParameters;\n}\n\nexport class StoreFeatureModule implements OnDestroy {\n/**\n * @param {?} features\n * @param {?} featureReducers\n * @param {?} reducerManager\n */\nconstructor(\nprivate features: StoreFeature<any, any>[],\nprivate featureReducers: ActionReducerMap<any>[],\nprivate reducerManager: ReducerManager\n  ) {\n    features\n      .map((feature, index) => {\n        const featureReducerCollection = featureReducers.shift();\n        const reducers = featureReducerCollection[index];\n\n        return {\n          ...feature,\n          reducers,\n          initialState: _initialStateFactory(feature.initialState),\n        };\n      })\n      .forEach(feature => reducerManager.addFeature(feature));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.features.forEach(feature =>\n      this.reducerManager.removeFeature(feature)\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [STORE_FEATURES, ] }, ]},\n{type: Array, decorators: [{ type: Inject, args: [FEATURE_REDUCERS, ] }, ]},\n{type: ReducerManager, },\n];\n}\n\nfunction StoreFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreFeatureModule.ctorParameters;\n/** @type {?} */\nStoreFeatureModule.prototype.features;\n/** @type {?} */\nStoreFeatureModule.prototype.featureReducers;\n/** @type {?} */\nStoreFeatureModule.prototype.reducerManager;\n}\n\n\nexport type StoreConfig<T, V extends Action = Action> = {\n  initialState?: InitialState<T>;\n  reducerFactory?: ActionReducerFactory<T, V>;\n  metaReducers?: ActionReducer<T, V>[];\n};\nexport class StoreModule {\n  static forRoot<T, V extends Action = Action>(\n    reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: StoreConfig<T, V>\n  ): ModuleWithProviders;\n/**\n * @param {?} reducers\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(\n    reducers:\n      | ActionReducerMap<any, any>\n      | InjectionToken<ActionReducerMap<any, any>>,\n    config: StoreConfig<any, any> = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: StoreRootModule,\n      providers: [\n        { provide: _INITIAL_STATE, useValue: config.initialState },\n        {\n          provide: INITIAL_STATE,\n          useFactory: _initialStateFactory,\n          deps: [_INITIAL_STATE],\n        },\n        { provide: _INITIAL_REDUCERS, useValue: reducers },\n        reducers instanceof InjectionToken\n          ? [{ provide: _STORE_REDUCERS, useExisting: reducers }]\n          : [],\n        {\n          provide: INITIAL_REDUCERS,\n          deps: [\n            _INITIAL_REDUCERS,\n            [new Optional(), new Inject(_STORE_REDUCERS)],\n          ],\n          useFactory: _createStoreReducers,\n        },\n        {\n          provide: META_REDUCERS,\n          useValue: config.metaReducers ? config.metaReducers : [],\n        },\n        {\n          provide: _REDUCER_FACTORY,\n          useValue: config.reducerFactory\n            ? config.reducerFactory\n            : combineReducers,\n        },\n        {\n          provide: REDUCER_FACTORY,\n          deps: [_REDUCER_FACTORY, META_REDUCERS],\n          useFactory: createReducerFactory,\n        },\n        ACTIONS_SUBJECT_PROVIDERS,\n        REDUCER_MANAGER_PROVIDERS,\n        SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n        STATE_PROVIDERS,\n        STORE_PROVIDERS,\n      ],\n    };\n  }\n\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducers: ActionReducerMap<T, V>,\n    config?: StoreConfig<T, V>\n  ): ModuleWithProviders;\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducer: ActionReducer<T, V>,\n    config?: StoreConfig<T, V>\n  ): ModuleWithProviders;\n/**\n * @param {?} featureName\n * @param {?} reducers\n * @param {?=} config\n * @return {?}\n */\nstatic forFeature(\n    featureName: string,\n    reducers: ActionReducerMap<any, any> | ActionReducer<any, any>,\n    config: StoreConfig<any, any> = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [\n        {\n          provide: STORE_FEATURES,\n          multi: true,\n          useValue: /** @type {?} */(( <StoreFeature<any, any>>{\n            key: featureName,\n            reducerFactory: config.reducerFactory\n              ? config.reducerFactory\n              : combineReducers,\n            metaReducers: config.metaReducers ? config.metaReducers : [],\n            initialState: config.initialState,\n          })),\n        },\n        { provide: _FEATURE_REDUCERS, multi: true, useValue: reducers },\n        {\n          provide: _FEATURE_REDUCERS_TOKEN,\n          multi: true,\n          useExisting:\n            reducers instanceof InjectionToken ? reducers : _FEATURE_REDUCERS,\n        },\n        {\n          provide: FEATURE_REDUCERS,\n          multi: true,\n          deps: [\n            _FEATURE_REDUCERS,\n            [new Optional(), new Inject(_FEATURE_REDUCERS_TOKEN)],\n          ],\n          useFactory: _createFeatureReducers,\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreModule.ctorParameters;\n}\n\n/**\n * @param {?} reducers\n * @param {?} tokenReducers\n * @return {?}\n */\nexport function _createStoreReducers(\n  reducers: ActionReducerMap<any, any>,\n  tokenReducers: ActionReducerMap<any, any>\n) {\n  return reducers instanceof InjectionToken ? tokenReducers : reducers;\n}\n/**\n * @param {?} reducerCollection\n * @param {?} tokenReducerCollection\n * @return {?}\n */\nexport function _createFeatureReducers(\n  reducerCollection: ActionReducerMap<any, any>[],\n  tokenReducerCollection: ActionReducerMap<any, any>[]\n) {\n  return reducerCollection.map((reducer, index) => {\n    return reducer instanceof InjectionToken\n      ? tokenReducerCollection[index]\n      : reducer;\n  });\n}\n/**\n * @param {?} initialState\n * @return {?}\n */\nexport function _initialStateFactory(initialState: any): any {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n\n  return initialState;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Selector } from './models';\n\nexport interface MemoizedSelector<State, Result>\n  extends Selector<State, Result> {\n  release(): void;\n}\n\nexport type AnyFn = (...args: any[]) => any;\n/**\n * @param {?} t\n * @return {?}\n */\nexport function memoize(t: AnyFn): { memoized: AnyFn; reset: () => void } {\n  let /** @type {?} */ lastArguments: null | IArguments = null;\n  let /** @type {?} */ lastResult: any = null;\n/**\n * @return {?}\n */\nfunction reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n/**\n * @return {?}\n */\nfunction memoized(): any {\n    if (!lastArguments) {\n      lastResult = t.apply(null, arguments);\n      lastArguments = arguments;\n\n      return lastResult;\n    }\n    for (let /** @type {?} */ i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== lastArguments[i]) {\n        lastResult = t.apply(null, arguments);\n        lastArguments = arguments;\n\n        return lastResult;\n      }\n    }\n\n    return lastResult;\n  }\n\n  return { memoized, reset };\n}\n\nexport function createSelector<State, S1, Result>(\n  s1: Selector<State, S1>,\n  projector: (S1: S1) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  projector: (s1: S1, s2: S2) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  s8: Selector<State, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8\n  ) => Result\n): MemoizedSelector<State, Result>;\n/**\n * @param {...?} args\n * @return {?}\n */\nexport function createSelector(...args: any[]): Selector<any, any> {\n  const /** @type {?} */ selectors = args.slice(0, args.length - 1);\n  const /** @type {?} */ projector = args[args.length - 1];\n  const /** @type {?} */ memoizedSelectors = selectors.filter(\n    (selector: any) =>\n      selector.release && typeof selector.release === 'function'\n  );\n\n  const { memoized, reset } = memoize(function(state: any) {\n    const /** @type {?} */ args = selectors.map(fn => fn(state));\n\n    return projector.apply(null, args);\n  });\n/**\n * @return {?}\n */\nfunction release() {\n    reset();\n\n    memoizedSelectors.forEach(selector => selector.release());\n  }\n\n  return Object.assign(memoized, { release });\n}\n/**\n * @template T\n * @param {?} featureName\n * @return {?}\n */\nexport function createFeatureSelector<T>(\n  featureName: string\n): MemoizedSelector<object, T> {\n  const { memoized, reset } = memoize(function(state: any): any {\n    return state[featureName];\n  });\n\n  return Object.assign(memoized, { release: reset });\n}\n","import { InjectionToken } from '@angular/core';\n\nexport const /** @type {?} */ _INITIAL_STATE = new InjectionToken(\n  '@ngrx/store Internal Initial State'\n);\nexport const /** @type {?} */ INITIAL_STATE = new InjectionToken('@ngrx/store Initial State');\nexport const /** @type {?} */ REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Reducer Factory'\n);\nexport const /** @type {?} */ _REDUCER_FACTORY = new InjectionToken(\n  '@ngrx/store Reducer Factory Provider'\n);\nexport const /** @type {?} */ INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Initial Reducers'\n);\nexport const /** @type {?} */ _INITIAL_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Initial Reducers'\n);\nexport const /** @type {?} */ META_REDUCERS = new InjectionToken('@ngrx/store Meta Reducers');\nexport const /** @type {?} */ STORE_FEATURES = new InjectionToken('@ngrx/store Store Features');\nexport const /** @type {?} */ _STORE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Store Reducers'\n);\nexport const /** @type {?} */ _FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers'\n);\nexport const /** @type {?} */ _FEATURE_REDUCERS_TOKEN = new InjectionToken(\n  '@ngrx/store Internal Feature Reducers Token'\n);\nexport const /** @type {?} */ FEATURE_REDUCERS = new InjectionToken(\n  '@ngrx/store Feature Reducers'\n);\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Action } from './models';\n\nexport const /** @type {?} */ INIT = /** @type {?} */(( '@ngrx/store/init' as '@ngrx/store/init'));\nexport class ActionsSubject extends BehaviorSubject<Action>\n  implements OnDestroy {\nconstructor() {\n    super({ type: INIT });\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: Action): void {\n    if (typeof action === 'undefined') {\n      throw new TypeError(`Actions must be objects`);\n    } else if (typeof action.type === 'undefined') {\n      throw new TypeError(`Actions must have a type property`);\n    }\n\n    super.next(action);\n  }\n/**\n * @return {?}\n */\ncomplete() {\n    /* noop */\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ActionsSubject_tsickle_Closure_declarations() {\n/** @type {?} */\nActionsSubject.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActionsSubject.ctorParameters;\n}\n\n\nexport const /** @type {?} */ ACTIONS_SUBJECT_PROVIDERS: Provider[] = [ActionsSubject];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n  StoreFeature,\n} from './models';\nimport { INITIAL_STATE, INITIAL_REDUCERS, REDUCER_FACTORY } from './tokens';\nimport { omit, createReducerFactory } from './utils';\nimport { ActionsSubject } from './actions_subject';\n/**\n * @abstract\n */\nexport abstract class ReducerObservable extends Observable<\n  ActionReducer<any, any>\n> {}\n/**\n * @abstract\n */\nexport abstract class ReducerManagerDispatcher extends ActionsSubject {}\nexport const /** @type {?} */ UPDATE = /** @type {?} */(( '@ngrx/store/update-reducers' as '@ngrx/store/update-reducers'));\nexport class ReducerManager extends BehaviorSubject<ActionReducer<any, any>>\n  implements OnDestroy {\n/**\n * @param {?} dispatcher\n * @param {?} initialState\n * @param {?} reducers\n * @param {?} reducerFactory\n */\nconstructor(\nprivate dispatcher: ReducerManagerDispatcher,\nprivate initialState: any,\nprivate reducers: ActionReducerMap<any, any>,\nprivate reducerFactory: ActionReducerFactory<any, any>\n  ) {\n    super(reducerFactory(reducers, initialState));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\naddFeature({\n    reducers,\n    reducerFactory,\n    metaReducers,\n    initialState,\n    key,\n  }: StoreFeature<any, any>) {\n    const /** @type {?} */ reducer =\n      typeof reducers === 'function'\n        ? reducers\n        : createReducerFactory(reducerFactory, metaReducers)(\n            reducers,\n            initialState\n          );\n\n    this.addReducer(key, reducer);\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nremoveFeature({ key }: StoreFeature<any, any>) {\n    this.removeReducer(key);\n  }\n/**\n * @param {?} key\n * @param {?} reducer\n * @return {?}\n */\naddReducer(key: string, reducer: ActionReducer<any, any>) {\n    this.reducers = { ...this.reducers, [key]: reducer };\n\n    this.updateReducers();\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nremoveReducer(key: string) {\n    this.reducers = omit(this.reducers, key);\n\n    this.updateReducers();\n  }\n/**\n * @return {?}\n */\nprivate updateReducers() {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next({ type: UPDATE });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ReducerManagerDispatcher, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY, ] }, ]},\n];\n}\n\nfunction ReducerManager_tsickle_Closure_declarations() {\n/** @type {?} */\nReducerManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReducerManager.ctorParameters;\n/** @type {?} */\nReducerManager.prototype.dispatcher;\n/** @type {?} */\nReducerManager.prototype.initialState;\n/** @type {?} */\nReducerManager.prototype.reducers;\n/** @type {?} */\nReducerManager.prototype.reducerFactory;\n}\n\n\nexport const /** @type {?} */ REDUCER_MANAGER_PROVIDERS: Provider[] = [\n  ReducerManager,\n  { provide: ReducerObservable, useExisting: ReducerManager },\n  { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Provider, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Action } from './models';\nexport class ScannedActionsSubject extends Subject<Action>\n  implements OnDestroy {\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScannedActionsSubject_tsickle_Closure_declarations() {\n/** @type {?} */\nScannedActionsSubject.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScannedActionsSubject.ctorParameters;\n}\n\n\nexport const /** @type {?} */ SCANNED_ACTIONS_SUBJECT_PROVIDERS: Provider[] = [\n  ScannedActionsSubject,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Provider } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { map } from 'rxjs/operator/map';\nimport { pluck } from 'rxjs/operator/pluck';\nimport { distinctUntilChanged } from 'rxjs/operator/distinctUntilChanged';\nimport { Action, ActionReducer } from './models';\nimport { ActionsSubject } from './actions_subject';\nimport { StateObservable } from './state';\nimport { ReducerManager } from './reducer_manager';\nexport class Store<T> extends Observable<T> implements Observer<Action> {\n/**\n * @param {?} state$\n * @param {?} actionsObserver\n * @param {?} reducerManager\n */\nconstructor(\n    state$: StateObservable,\nprivate actionsObserver: ActionsSubject,\nprivate reducerManager: ReducerManager\n  ) {\n    super();\n\n    this.source = state$;\n  }\n\n  select<K>(mapFn: (state: T) => K): Store<K>;\n  select<a extends keyof T>(key: a): Store<T[a]>;\n  select<a extends keyof T, b extends keyof T[a]>(\n    key1: a,\n    key2: b\n  ): Store<T[a][b]>;\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(\n    key1: a,\n    key2: b,\n    key3: c\n  ): Store<T[a][b][c]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c]\n  >(key1: a, key2: b, key3: c, key4: d): Store<T[a][b][c][d]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d]\n  >(key1: a, key2: b, key3: c, key4: d, key5: e): Store<T[a][b][c][d][e]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e]\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f\n  ): Store<T[a][b][c][d][e][f]>;\n/**\n * @param {?} pathOrMapFn\n * @param {...?} paths\n * @return {?}\n */\nselect(\n    pathOrMapFn: ((state: T) => any) | string,\n    ...paths: string[]\n  ): Store<any> {\n    let /** @type {?} */ mapped$: Store<any>;\n\n    if (typeof pathOrMapFn === 'string') {\n      mapped$ = pluck.call(this, pathOrMapFn, ...paths);\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = map.call(this, pathOrMapFn);\n    } else {\n      throw new TypeError(\n        `Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n          ` expected 'string' or 'function'`\n      );\n    }\n\n    return distinctUntilChanged.call(mapped$);\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<T, R>): Store<R> {\n    const /** @type {?} */ store = new Store<R>(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n\n    return store;\n  }\n/**\n * @template V\n * @param {?} action\n * @return {?}\n */\ndispatch<V extends Action = Action>(action: V) {\n    this.actionsObserver.next(action);\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: Action) {\n    this.actionsObserver.next(action);\n  }\n/**\n * @param {?} err\n * @return {?}\n */\nerror(err: any) {\n    this.actionsObserver.error(err);\n  }\n/**\n * @return {?}\n */\ncomplete() {\n    this.actionsObserver.complete();\n  }\n/**\n * @template State, Actions\n * @param {?} key\n * @param {?} reducer\n * @return {?}\n */\naddReducer<State, Actions extends Action = Action>(\n    key: string,\n    reducer: ActionReducer<State, Actions>\n  ) {\n    this.reducerManager.addReducer(key, reducer);\n  }\n/**\n * @template Key\n * @param {?} key\n * @return {?}\n */\nremoveReducer<Key extends keyof T>(key: Key) {\n    this.reducerManager.removeReducer(key);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StateObservable, },\n{type: ActionsSubject, },\n{type: ReducerManager, },\n];\n}\n\nfunction Store_tsickle_Closure_declarations() {\n/** @type {?} */\nStore.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStore.ctorParameters;\n/** @type {?} */\nStore.prototype.actionsObserver;\n/** @type {?} */\nStore.prototype.reducerManager;\n}\n\n\nexport const /** @type {?} */ STORE_PROVIDERS: Provider[] = [Store];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}