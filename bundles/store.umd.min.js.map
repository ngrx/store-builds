{"version":3,"sources":["../../../modules/store/src/utils.ts","../../../modules/store/src/state.ts","../../../modules/store/src/selector.ts","../../../modules/store/src/tokens.ts","../../../modules/store/src/actions_subject.ts","../../../modules/store/src/reducer_manager.ts","../../../modules/store/src/scanned_actions_subject.ts","../../../modules/store/src/store.ts","../../../modules/store/src/store_module.ts"],"names":["combineReducers","reducers","initialState","reducerKeys","Object","keys","finalReducers","i","length","key","finalReducerKeys","state","action","hasChanged","nextState","reducer","previousStateForKey","nextStateForKey","omit","object","keyToRemove","filter","reduce","result","compose","functions","_i","arguments","arg","last","slice","reduceRight","composed","fn","reduceState","_a","_b","undefined","memoize","t","reset","lastArguments","lastResult","memoized","apply","createSelector","release","memoizedSelectors","forEach","selector","args","selectors","projector","assign","createFeatureSelector","featureName","INITIAL_STATE","OpaqueToken","REDUCER_FACTORY","INITIAL_REDUCERS","STORE_FEATURES","INIT","ActionsSubject","_super","call","this","type","__extends","prototype","next","Error","complete","ngOnDestroy","BehaviorSubject","decorators","Injectable","ctorParameters","ACTIONS_SUBJECT_PROVIDERS","ReducerObservable","Observable","ReducerManagerDispatcher","UPDATE","ReducerManager","dispatcher","reducerFactory","_this","addFeature","addReducer","removeFeature","removeReducer","updateReducers","Inject","REDUCER_MANAGER_PROVIDERS","provide","useExisting","ScannedActionsSubject","Subject","SCANNED_ACTIONS_SUBJECT_PROVIDERS","StateObservable","State","actions$","reducer$","scannedActions","actionsOnQueue$","observeOn","queue","withLatestReducer$","withLatestFrom","stateAndAction$","scan","stateSubscription","subscribe","unsubscribe","STATE_PROVIDERS","Store","state$","actionsObserver","reducerManager","source","select","pathOrMapFn","paths","mapped$","pluck","concat","TypeError","map","distinctUntilChanged","lift","operator","store","dispatch","error","err","STORE_PROVIDERS","StoreRootModule","NgModule","StoreFeatureModule","features","feature","Array","StoreModule","forRoot","config","ngModule","providers","useValue","forFeature","multi"],"mappings":"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","file":"./dist/store/bundles/store.umd.min.js","sourcesContent":["import { Action, ActionReducer, ActionReducerMap, ActionReducerFactory } from './models';\n\n\nexport function combineReducers<T, V extends Action = Action>(reducers: ActionReducerMap<T, V>, initialState?: Partial<T>): ActionReducer<T, V>;\n/**\n * @param {?} reducers\n * @param {?=} initialState\n * @return {?}\n */\nexport function combineReducers(reducers: any, initialState: any = {}): ActionReducer<any, Action> {\n  const /** @type {?} */ reducerKeys = Object.keys(reducers);\n  const /** @type {?} */ finalReducers: any = {};\n\n  for (let /** @type {?} */ i = 0; i < reducerKeys.length; i++) {\n    const /** @type {?} */ key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  const /** @type {?} */ finalReducerKeys = Object.keys(finalReducers);\n\n  return function combination(state = initialState, action) {\n    let /** @type {?} */ hasChanged = false;\n    const /** @type {?} */ nextState: any = {};\n    for (let /** @type {?} */ i = 0; i < finalReducerKeys.length; i++) {\n      const /** @type {?} */ key = finalReducerKeys[i];\n      const /** @type {?} */ reducer: any = finalReducers[key];\n      const /** @type {?} */ previousStateForKey = state[key];\n      const /** @type {?} */ nextStateForKey = reducer(previousStateForKey, action);\n\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n/**\n * @param {?} object\n * @param {?} keyToRemove\n * @return {?}\n */\nexport function omit(object: { [key: string]: any }, keyToRemove: string) {\n  return Object.keys(object)\n    .filter(key => key !== keyToRemove)\n    .reduce((result, key) => ( /** @type {?} */((<any>result)))[key] = object[key], {});\n}\n\nexport function compose<A>(): (i: A) => A;\nexport function compose<A, B>(b: (i: A) => B): (i: A) => B;\nexport function compose<A, B, C>(c: (i: B) => C, b: (i: A) => B): (i: A) => C;\nexport function compose<A, B, C, D>(d: (i: C) => D, c: (i: B) => C, b: (i: A) => B): (i: A) => D;\nexport function compose<A, B, C, D, E>(e: (i: D) => E, d: (i: C) => D, c: (i: B) => C, b: (i: A) => B): (i: A) => E;\nexport function compose<A, B, C, D, E, F>(f: (i: E) => F, e: (i: D) => E, d: (i: C) => D, c: (i: B) => C, b: (i: A) => B): (i: A) => F;\n/**\n * @param {...?} functions\n * @return {?}\n */\nexport function compose(...functions: any[]) {\n  return function(arg: any) {\n    if (functions.length === 0) {\n      return arg;\n    }\n\n    const /** @type {?} */ last = functions[functions.length - 1];\n    const /** @type {?} */ rest = functions.slice(0, -1);\n\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  }\n}\n","import { Injectable, Inject, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { queue } from 'rxjs/scheduler/queue';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { startWith } from 'rxjs/operator/startWith';\nimport { withLatestFrom } from 'rxjs/operator/withLatestFrom';\nimport { scan } from 'rxjs/operator/scan';\nimport { ActionsSubject } from './actions_subject';\nimport { Action, ActionReducer } from './models';\nimport { INITIAL_STATE } from './tokens';\nimport { ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\n/**\n * @abstract\n */\nexport abstract class StateObservable extends Observable<any> { }\nexport class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = '@ngrx/store/init';\nprivate stateSubscription: Subscription;\n/**\n * @param {?} actions$\n * @param {?} reducer$\n * @param {?} scannedActions\n * @param {?} initialState\n */\nconstructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions: ScannedActionsSubject,\n     initialState: any\n  ) {\n    super(initialState);\n\n    const actionsOnQueue$: Observable<Action> = observeOn.call(actions$, queue);\n    const withLatestReducer$: Observable<[ Action, ActionReducer<any, Action> ]> = withLatestFrom.call(actionsOnQueue$, reducer$);\n    const stateAndAction$: Observable<{ state: any, action: Action }> = scan.call(withLatestReducer$, reduceState, initialState);\n\n    this.stateSubscription = stateAndAction$.subscribe({\n      next: ({ state, action }) => {\n        this.next(state);\n        scannedActions.next(action);\n      }\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ActionsSubject, },\n{type: ReducerObservable, },\n{type: ScannedActionsSubject, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n];\n}\n\nfunction State_tsickle_Closure_declarations() {\n/** @type {?} */\nState.INIT;\n/** @type {?} */\nState.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nState.ctorParameters;\n/** @type {?} */\nState.prototype.stateSubscription;\n}\n\n\nexport type StateActionPair<T, V extends Action = Action> = { state: T | undefined, action?: V };\n/**\n * @template T, V\n * @param {?=} __0\n * @param {?=} __1\n * @return {?}\n */\nexport function reduceState<T, V extends Action = Action>(\n  { state }: StateActionPair<T, V> = { state: undefined },\n  [ action, reducer ]: [ V, ActionReducer<T, V> ]\n): StateActionPair<T, V> {\n  return { state: reducer(state, action), action };\n}\n\nexport const /** @type {?} */ STATE_PROVIDERS: Provider[] = [\n  State,\n  { provide: StateObservable, useExisting: State },\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Selector } from './models';\n\n\nexport interface MemoizedSelector<State, Result> extends Selector<State, Result> {\n  release(): void;\n}\n\nexport type AnyFn = (...args: any[]) => any;\n/**\n * @param {?} t\n * @return {?}\n */\nexport function memoize(t: AnyFn): { memoized: AnyFn, reset: () => void } {\n  let /** @type {?} */ lastArguments: null | IArguments = null;\n  let /** @type {?} */ lastResult: any = null;\n/**\n * @return {?}\n */\nfunction reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n/**\n * @return {?}\n */\nfunction memoized(): any {\n    if (!lastArguments) {\n      lastResult = t.apply(null, arguments);\n      lastArguments = arguments;\n\n      return lastResult;\n    }\n    for (let /** @type {?} */ i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== lastArguments[i]) {\n        lastResult = t.apply(null, arguments);\n        lastArguments = arguments;\n\n        return lastResult;\n      }\n    }\n\n    return lastResult;\n  }\n\n  return { memoized, reset };\n}\n\nexport function createSelector<State, S1, Result>(\n  s1: Selector<State, S1>,\n  projector: (S1: S1) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  projector: (s1: S1, s2: S2) => Result,\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result,\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result,\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result,\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result,\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result,\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  s8: Selector<State, S8>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7, s8: S8) => Result,\n): MemoizedSelector<State, Result>;\n/**\n * @param {...?} args\n * @return {?}\n */\nexport function createSelector(...args: any[]): Selector<any, any> {\n  const /** @type {?} */ selectors = args.slice(0, args.length - 1);\n  const /** @type {?} */ projector = args[args.length - 1];\n  const /** @type {?} */ memoizedSelectors = selectors.filter((selector: any) => selector.release && typeof selector.release === 'function');\n\n  const { memoized, reset } = memoize(function (state: any) {\n    const /** @type {?} */ args = selectors.map(fn => fn(state));\n\n    return projector.apply(null, args);\n  });\n/**\n * @return {?}\n */\nfunction release() {\n    reset();\n\n    memoizedSelectors.forEach(selector => selector.release());\n  }\n\n  return Object.assign(memoized, { release });\n}\n/**\n * @template T\n * @param {?} featureName\n * @return {?}\n */\nexport function createFeatureSelector<T>(featureName: string): MemoizedSelector<object, T> {\n  const { memoized, reset } = memoize(function (state: any): any {\n    return state[featureName];\n  });\n\n  return Object.assign(memoized, { release: reset });\n}\n","import { OpaqueToken } from '@angular/core';\n\n\nexport const /** @type {?} */ INITIAL_STATE = new OpaqueToken('@ngrx/store Initial State');\nexport const /** @type {?} */ REDUCER_FACTORY = new OpaqueToken('@ngrx/store Reducer Factory');\nexport const /** @type {?} */ INITIAL_REDUCERS = new OpaqueToken('@ngrx/store Initial Reducers');\nexport const /** @type {?} */ STORE_FEATURES = new OpaqueToken('@ngrx/store Store Features');\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Action } from './models';\n\n\nexport const /** @type {?} */ INIT = '@ngrx/store/init';\nexport class ActionsSubject extends BehaviorSubject<Action> implements OnDestroy {\nconstructor() {\n    super({ type: INIT });\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: Action): void {\n    if (typeof action === 'undefined') {\n      throw new Error(`Actions must be objects`);\n    }\n    else if (typeof action.type === 'undefined') {\n      throw new Error(`Actions must have a type property`);\n    }\n\n    super.next(action);\n  }\n/**\n * @return {?}\n */\ncomplete() { /* noop */ }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ActionsSubject_tsickle_Closure_declarations() {\n/** @type {?} */\nActionsSubject.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActionsSubject.ctorParameters;\n}\n\n\nexport const /** @type {?} */ ACTIONS_SUBJECT_PROVIDERS: Provider[] = [\n  ActionsSubject\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Action, ActionReducer, ActionReducerMap, ActionReducerFactory, StoreFeature } from './models';\nimport { INITIAL_STATE, INITIAL_REDUCERS, REDUCER_FACTORY } from './tokens';\nimport { omit } from './utils';\nimport { ActionsSubject } from './actions_subject';\n/**\n * @abstract\n */\nexport abstract class ReducerObservable extends Observable<ActionReducer<any, any>> { }\n/**\n * @abstract\n */\nexport abstract class ReducerManagerDispatcher extends ActionsSubject { }\nexport const /** @type {?} */ UPDATE = '@ngrx/store/update-reducers';\nexport class ReducerManager extends BehaviorSubject<ActionReducer<any, any>> implements OnDestroy {\n/**\n * @param {?} dispatcher\n * @param {?} initialState\n * @param {?} reducers\n * @param {?} reducerFactory\n */\nconstructor(\nprivate dispatcher: ReducerManagerDispatcher,\nprivate initialState: any,\nprivate reducers: ActionReducerMap<any, any>,\nprivate reducerFactory: ActionReducerFactory<any, any>\n  ) {\n    super(reducerFactory(reducers, initialState));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\naddFeature({ reducers, reducerFactory, initialState, key }: StoreFeature<any, any>) {\n    const /** @type {?} */ reducer = reducerFactory(reducers, initialState);\n\n    this.addReducer(key, reducer);\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nremoveFeature({ key }: StoreFeature<any, any>) {\n    this.removeReducer(key);\n  }\n/**\n * @param {?} key\n * @param {?} reducer\n * @return {?}\n */\naddReducer(key: string, reducer: ActionReducer<any, any>) {\n    this.reducers = { ...this.reducers, [key]: reducer };\n\n    this.updateReducers();\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nremoveReducer(key: string) {\n    this.reducers = omit(this.reducers, key);\n\n    this.updateReducers();\n  }\n/**\n * @return {?}\n */\nprivate updateReducers() {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next({ type: UPDATE });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ReducerManagerDispatcher, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY, ] }, ]},\n];\n}\n\nfunction ReducerManager_tsickle_Closure_declarations() {\n/** @type {?} */\nReducerManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReducerManager.ctorParameters;\n/** @type {?} */\nReducerManager.prototype.dispatcher;\n/** @type {?} */\nReducerManager.prototype.initialState;\n/** @type {?} */\nReducerManager.prototype.reducers;\n/** @type {?} */\nReducerManager.prototype.reducerFactory;\n}\n\n\nexport const /** @type {?} */ REDUCER_MANAGER_PROVIDERS: Provider[] = [\n  ReducerManager,\n  { provide: ReducerObservable, useExisting: ReducerManager },\n  { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Provider, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Action } from './models';\nexport class ScannedActionsSubject extends Subject<Action> implements OnDestroy {\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScannedActionsSubject_tsickle_Closure_declarations() {\n/** @type {?} */\nScannedActionsSubject.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScannedActionsSubject.ctorParameters;\n}\n\n\nexport const /** @type {?} */ SCANNED_ACTIONS_SUBJECT_PROVIDERS: Provider[] = [\n  ScannedActionsSubject,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Provider } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { map } from 'rxjs/operator/map';\nimport { pluck } from 'rxjs/operator/pluck';\nimport { distinctUntilChanged } from 'rxjs/operator/distinctUntilChanged';\nimport { Action, ActionReducer } from './models';\nimport { ActionsSubject } from './actions_subject';\nimport { StateObservable } from './state';\nimport { ReducerManager } from './reducer_manager';\nexport class Store<T> extends Observable<Readonly<T>> implements Observer<Action> {\n/**\n * @param {?} state$\n * @param {?} actionsObserver\n * @param {?} reducerManager\n */\nconstructor(\n    state$: StateObservable,\nprivate actionsObserver: ActionsSubject,\nprivate reducerManager: ReducerManager\n  ) {\n    super();\n\n    this.source = state$;\n  }\n\n  select<K>(mapFn: (state: T) => K): Store<K>;\n  select<a extends keyof T>(key: a): Store<T[a]>;\n  select<a extends keyof T, b extends keyof T[a]>(key1: a, key2: b): Store<T[a][b]>\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(key1: a, key2: b, key3: c): Store<T[a][b][c]>\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b], d extends keyof T[a][b][c]>(key1: a, key2: b, key3: c, key4: d): Store<T[a][b][c][d]>\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b], d extends keyof T[a][b][c], e extends keyof T[a][b][c][d]>(key1: a, key2: b, key3: c, key4: d, key5: e): Store<T[a][b][c][d][e]>\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b], d extends keyof T[a][b][c], e extends keyof T[a][b][c][d], f extends keyof T[a][b][c][d][e]>(key1: a, key2: b, key3: c, key4: d, key5: e, key6: f): Store<T[a][b][c][d][e][f]>\n/**\n * @param {?} pathOrMapFn\n * @param {...?} paths\n * @return {?}\n */\nselect(pathOrMapFn: ((state: T) => any) | string, ...paths: string[]): Store<any> {\n    let /** @type {?} */ mapped$: Store<any>;\n\n    if (typeof pathOrMapFn === 'string') {\n      mapped$ = pluck.call(this, pathOrMapFn, ...paths);\n    }\n    else if (typeof pathOrMapFn === 'function') {\n      mapped$ = map.call(this, pathOrMapFn);\n    }\n    else {\n      throw new TypeError(`Unexpected type '${ typeof pathOrMapFn }' in select operator,`\n        + ` expected 'string' or 'function'`);\n    }\n\n    return distinctUntilChanged.call(mapped$);\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<T, R>): Store<R> {\n    const /** @type {?} */ store = new Store<R>(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n\n    return store;\n  }\n/**\n * @template V\n * @param {?} action\n * @return {?}\n */\ndispatch<V extends Action = Action>(action: V) {\n    this.actionsObserver.next(action);\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: Action) {\n    this.actionsObserver.next(action);\n  }\n/**\n * @param {?} err\n * @return {?}\n */\nerror(err: any) {\n    this.actionsObserver.error(err);\n  }\n/**\n * @return {?}\n */\ncomplete() {\n    this.actionsObserver.complete();\n  }\n/**\n * @template State, Actions\n * @param {?} key\n * @param {?} reducer\n * @return {?}\n */\naddReducer<State, Actions extends Action = Action>(key: string, reducer: ActionReducer<State, Actions>) {\n    this.reducerManager.addReducer(key, reducer);\n  }\n/**\n * @template Key\n * @param {?} key\n * @return {?}\n */\nremoveReducer<Key extends keyof T>(key: Key) {\n    this.reducerManager.removeReducer(key);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StateObservable, },\n{type: ActionsSubject, },\n{type: ReducerManager, },\n];\n}\n\nfunction Store_tsickle_Closure_declarations() {\n/** @type {?} */\nStore.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStore.ctorParameters;\n/** @type {?} */\nStore.prototype.actionsObserver;\n/** @type {?} */\nStore.prototype.reducerManager;\n}\n\n\nexport const /** @type {?} */ STORE_PROVIDERS: Provider[] = [\n  Store\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { NgModule, Inject, ModuleWithProviders, OnDestroy } from '@angular/core';\nimport { Action, ActionReducerMap, ActionReducerFactory, StoreFeature } from './models';\nimport { combineReducers } from './utils';\nimport { INITIAL_STATE, INITIAL_REDUCERS, REDUCER_FACTORY, STORE_FEATURES } from './tokens';\nimport { ACTIONS_SUBJECT_PROVIDERS } from './actions_subject';\nimport { REDUCER_MANAGER_PROVIDERS, ReducerManager } from './reducer_manager';\nimport { SCANNED_ACTIONS_SUBJECT_PROVIDERS } from './scanned_actions_subject';\nimport { STATE_PROVIDERS } from './state';\nimport { STORE_PROVIDERS } from './store';\nexport class StoreRootModule {\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{ }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StoreRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRootModule.ctorParameters;\n}\n\nexport class StoreFeatureModule implements OnDestroy {\n/**\n * @param {?} features\n * @param {?} reducerManager\n */\nconstructor(\nprivate features: StoreFeature<any, any>[],\nprivate reducerManager: ReducerManager\n  ) {\n    features.forEach(feature => reducerManager.addFeature(feature));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.features.forEach(feature => this.reducerManager.removeFeature(feature));\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{ }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [STORE_FEATURES, ] }, ]},\n{type: ReducerManager, },\n];\n}\n\nfunction StoreFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreFeatureModule.ctorParameters;\n/** @type {?} */\nStoreFeatureModule.prototype.features;\n/** @type {?} */\nStoreFeatureModule.prototype.reducerManager;\n}\n\n\nexport type StoreConfig<T, V extends Action = Action> = { initialState?: T, reducerFactory?: ActionReducerFactory<T, V> };\nexport class StoreModule {\n  static forRoot<T, V extends Action = Action>(reducers: ActionReducerMap<T, V>, config?: StoreConfig<T, V>): ModuleWithProviders;\n/**\n * @param {?} reducers\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(reducers: ActionReducerMap<any, any>, config: StoreConfig<any, any> = { }): ModuleWithProviders {\n    return {\n      ngModule: StoreRootModule,\n      providers: [\n        { provide: INITIAL_STATE, useValue: config.initialState },\n        { provide: INITIAL_REDUCERS, useValue: reducers },\n        { provide: REDUCER_FACTORY, useValue: config.reducerFactory ? config.reducerFactory : combineReducers },\n        ACTIONS_SUBJECT_PROVIDERS,\n        REDUCER_MANAGER_PROVIDERS,\n        SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n        STATE_PROVIDERS,\n        STORE_PROVIDERS,\n      ]\n    };\n  }\n\n  static forFeature<T, V extends Action = Action>(featureName: string, reducers: ActionReducerMap<T, V>, config?: StoreConfig<T, V>): ModuleWithProviders;\n/**\n * @param {?} featureName\n * @param {?} reducers\n * @param {?=} config\n * @return {?}\n */\nstatic forFeature(featureName: string, reducers: ActionReducerMap<any, any>, config: StoreConfig<any, any> = {}): ModuleWithProviders {\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [\n        {\n          provide: STORE_FEATURES,\n          multi: true,\n          useValue: /** @type {?} */(( <StoreFeature<any, any>>{\n            key: featureName,\n            reducers: reducers,\n            reducerFactory: config.reducerFactory ? config.reducerFactory : combineReducers,\n            initialState: config.initialState\n          }))\n        }\n      ]\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{ }, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreModule.ctorParameters;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}