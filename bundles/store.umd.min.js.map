{"version":3,"sources":["../../../modules/store/src/utils.ts","../../../modules/store/src/state.ts","../../../modules/store/src/selector.ts","../../../modules/store/src/store_module.ts","../../../modules/store/src/tokens.ts","../../../modules/store/src/actions_subject.ts","../../../modules/store/src/reducer_manager.ts","../../../modules/store/src/scanned_actions_subject.ts","../../../modules/store/src/store.ts"],"names":["combineReducers","reducers","initialState","reducerKeys","Object","keys","finalReducers","i","length","key","finalReducerKeys","state","action","hasChanged","nextState","reducer","previousStateForKey","nextStateForKey","omit","object","keyToRemove","filter","reduce","result","assign","_a","compose","functions","_i","arguments","arg","last","slice","reduceRight","composed","fn","reduceState","_b","undefined","memoize","t","reset","lastArguments","lastResult","memoized","apply","createSelector","release","memoizedSelectors","forEach","selector","args","selectors","projector","createFeatureSelector","featureName","isSelector","v","_initialStateFactory","_INITIAL_STATE","OpaqueToken","INITIAL_STATE","REDUCER_FACTORY","INITIAL_REDUCERS","STORE_FEATURES","INIT","ActionsSubject","_super","call","this","type","__extends","prototype","next","Error","complete","ngOnDestroy","BehaviorSubject","decorators","Injectable","ctorParameters","ACTIONS_SUBJECT_PROVIDERS","ReducerObservable","Observable","ReducerManagerDispatcher","UPDATE","ReducerManager","dispatcher","reducerFactory","_this","addFeature","addReducer","removeFeature","removeReducer","updateReducers","Inject","REDUCER_MANAGER_PROVIDERS","provide","useExisting","ScannedActionsSubject","Subject","SCANNED_ACTIONS_SUBJECT_PROVIDERS","StateObservable","State","actions$","reducer$","scannedActions","actionsOnQueue$","observeOn","queue","withLatestReducer$","withLatestFrom","stateAndAction$","scan","stateSubscription","subscribe","unsubscribe","STATE_PROVIDERS","Store","state$","actionsObserver","reducerManager","source","select","pathOrMapFn","paths","mapped$","pluck","concat","map","TypeError","s","distinctUntilChanged","lift","operator","store","dispatch","error","err","STORE_PROVIDERS","StoreRootModule","scannedActions$","NgModule","StoreFeatureModule","features","feature","Array","StoreModule","forRoot","config","ngModule","providers","useValue","useFactory","deps","InjectionToken","forFeature","multi"],"mappings":"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","file":"./dist/store/bundles/store.umd.min.js","sourcesContent":["import {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n} from './models';\n\nexport function combineReducers<T, V extends Action = Action>(\n  reducers: ActionReducerMap<T, V>,\n  initialState?: Partial<T>\n): ActionReducer<T, V>;\n/**\n * @param {?} reducers\n * @param {?=} initialState\n * @return {?}\n */\nexport function combineReducers(\n  reducers: any,\n  initialState: any = {}\n): ActionReducer<any, Action> {\n  const /** @type {?} */ reducerKeys = Object.keys(reducers);\n  const /** @type {?} */ finalReducers: any = {};\n\n  for (let /** @type {?} */ i = 0; i < reducerKeys.length; i++) {\n    const /** @type {?} */ key = reducerKeys[i];\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n\n  const /** @type {?} */ finalReducerKeys = Object.keys(finalReducers);\n\n  return function combination(state = initialState, action) {\n    let /** @type {?} */ hasChanged = false;\n    const /** @type {?} */ nextState: any = {};\n    for (let /** @type {?} */ i = 0; i < finalReducerKeys.length; i++) {\n      const /** @type {?} */ key = finalReducerKeys[i];\n      const /** @type {?} */ reducer: any = finalReducers[key];\n      const /** @type {?} */ previousStateForKey = state[key];\n      const /** @type {?} */ nextStateForKey = reducer(previousStateForKey, action);\n\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    return hasChanged ? nextState : state;\n  };\n}\n/**\n * @template T\n * @param {?} object\n * @param {?} keyToRemove\n * @return {?}\n */\nexport function omit<T extends { [key: string]: any }>(\n  object: T,\n  keyToRemove: keyof T\n): Partial<T> {\n  return Object.keys(object)\n    .filter(key => key !== keyToRemove)\n    .reduce((result, key) => Object.assign(result, { [key]: object[key] }), {});\n}\n\nexport function compose<A>(): (i: A) => A;\nexport function compose<A, B>(b: (i: A) => B): (i: A) => B;\nexport function compose<A, B, C>(c: (i: B) => C, b: (i: A) => B): (i: A) => C;\nexport function compose<A, B, C, D>(\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => D;\nexport function compose<A, B, C, D, E>(\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => E;\nexport function compose<A, B, C, D, E, F>(\n  f: (i: E) => F,\n  e: (i: D) => E,\n  d: (i: C) => D,\n  c: (i: B) => C,\n  b: (i: A) => B\n): (i: A) => F;\n/**\n * @param {...?} functions\n * @return {?}\n */\nexport function compose(...functions: any[]) {\n  return function(arg: any) {\n    if (functions.length === 0) {\n      return arg;\n    }\n\n    const /** @type {?} */ last = functions[functions.length - 1];\n    const /** @type {?} */ rest = functions.slice(0, -1);\n\n    return rest.reduceRight((composed, fn) => fn(composed), last(arg));\n  };\n}\n","import { Injectable, Inject, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Subscription } from 'rxjs/Subscription';\nimport { queue } from 'rxjs/scheduler/queue';\nimport { observeOn } from 'rxjs/operator/observeOn';\nimport { startWith } from 'rxjs/operator/startWith';\nimport { withLatestFrom } from 'rxjs/operator/withLatestFrom';\nimport { scan } from 'rxjs/operator/scan';\nimport { ActionsSubject } from './actions_subject';\nimport { Action, ActionReducer } from './models';\nimport { INITIAL_STATE } from './tokens';\nimport { ReducerObservable } from './reducer_manager';\nimport { ScannedActionsSubject } from './scanned_actions_subject';\n/**\n * @abstract\n */\nexport abstract class StateObservable extends Observable<any> {}\nexport class State<T> extends BehaviorSubject<any> implements OnDestroy {\n  static readonly INIT = '@ngrx/store/init';\nprivate stateSubscription: Subscription;\n/**\n * @param {?} actions$\n * @param {?} reducer$\n * @param {?} scannedActions\n * @param {?} initialState\n */\nconstructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions: ScannedActionsSubject,\n     initialState: any\n  ) {\n    super(initialState);\n\n    const actionsOnQueue$: Observable<Action> = observeOn.call(actions$, queue);\n    const withLatestReducer$: Observable<\n      [Action, ActionReducer<any, Action>]\n    > = withLatestFrom.call(actionsOnQueue$, reducer$);\n    const stateAndAction$: Observable<{\n      state: any;\n      action: Action;\n    }> = scan.call(withLatestReducer$, reduceState, initialState);\n\n    this.stateSubscription = stateAndAction$.subscribe({\n      next: ({ state, action }) => {\n        this.next(state);\n        scannedActions.next(action);\n      },\n    });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.stateSubscription.unsubscribe();\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ActionsSubject, },\n{type: ReducerObservable, },\n{type: ScannedActionsSubject, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n];\n}\n\nfunction State_tsickle_Closure_declarations() {\n/** @type {?} */\nState.INIT;\n/** @type {?} */\nState.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nState.ctorParameters;\n/** @type {?} */\nState.prototype.stateSubscription;\n}\n\n\nexport type StateActionPair<T, V extends Action = Action> = {\n  state: T | undefined;\n  action?: V;\n};\n/**\n * @template T, V\n * @param {?=} __0\n * @param {?=} __1\n * @return {?}\n */\nexport function reduceState<T, V extends Action = Action>(\n  { state }: StateActionPair<T, V> = { state: undefined },\n  [action, reducer]: [V, ActionReducer<T, V>]\n): StateActionPair<T, V> {\n  return { state: reducer(state, action), action };\n}\n\nexport const /** @type {?} */ STATE_PROVIDERS: Provider[] = [\n  State,\n  { provide: StateObservable, useExisting: State },\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Selector } from './models';\n\nexport interface MemoizedSelector<State, Result>\n  extends Selector<State, Result> {\n  release(): void;\n}\n\nexport type AnyFn = (...args: any[]) => any;\n/**\n * @param {?} t\n * @return {?}\n */\nexport function memoize(t: AnyFn): { memoized: AnyFn; reset: () => void } {\n  let /** @type {?} */ lastArguments: null | IArguments = null;\n  let /** @type {?} */ lastResult: any = null;\n/**\n * @return {?}\n */\nfunction reset() {\n    lastArguments = null;\n    lastResult = null;\n  }\n/**\n * @return {?}\n */\nfunction memoized(): any {\n    if (!lastArguments) {\n      lastResult = t.apply(null, arguments);\n      lastArguments = arguments;\n\n      return lastResult;\n    }\n    for (let /** @type {?} */ i = 0; i < arguments.length; i++) {\n      if (arguments[i] !== lastArguments[i]) {\n        lastResult = t.apply(null, arguments);\n        lastArguments = arguments;\n\n        return lastResult;\n      }\n    }\n\n    return lastResult;\n  }\n\n  return { memoized, reset };\n}\n\nexport function createSelector<State, S1, Result>(\n  s1: Selector<State, S1>,\n  projector: (S1: S1) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  projector: (s1: S1, s2: S2) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  projector: (s1: S1, s2: S2, s3: S3) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  projector: (s1: S1, s2: S2, s3: S3, s4: S4, s5: S5, s6: S6, s7: S7) => Result\n): MemoizedSelector<State, Result>;\nexport function createSelector<State, S1, S2, S3, S4, S5, S6, S7, S8, Result>(\n  s1: Selector<State, S1>,\n  s2: Selector<State, S2>,\n  s3: Selector<State, S3>,\n  s4: Selector<State, S4>,\n  s5: Selector<State, S5>,\n  s6: Selector<State, S6>,\n  s7: Selector<State, S7>,\n  s8: Selector<State, S8>,\n  projector: (\n    s1: S1,\n    s2: S2,\n    s3: S3,\n    s4: S4,\n    s5: S5,\n    s6: S6,\n    s7: S7,\n    s8: S8\n  ) => Result\n): MemoizedSelector<State, Result>;\n/**\n * @param {...?} args\n * @return {?}\n */\nexport function createSelector(...args: any[]): Selector<any, any> {\n  const /** @type {?} */ selectors = args.slice(0, args.length - 1);\n  const /** @type {?} */ projector = args[args.length - 1];\n  const /** @type {?} */ memoizedSelectors = selectors.filter(\n    (selector: any) =>\n      selector.release && typeof selector.release === 'function'\n  );\n\n  const { memoized, reset } = memoize(function(state: any) {\n    const /** @type {?} */ args = selectors.map(fn => fn(state));\n\n    return projector.apply(null, args);\n  });\n/**\n * @return {?}\n */\nfunction release() {\n    reset();\n\n    memoizedSelectors.forEach(selector => selector.release());\n  }\n\n  return Object.assign(memoized, { release });\n}\n/**\n * @template T\n * @param {?} featureName\n * @return {?}\n */\nexport function createFeatureSelector<T>(\n  featureName: string\n): MemoizedSelector<object, T> {\n  const { memoized, reset } = memoize(function(state: any): any {\n    return state[featureName];\n  });\n\n  return Object.assign(memoized, { release: reset });\n}\n/**\n * @param {?} v\n * @return {?}\n */\nexport function isSelector(v: any): v is MemoizedSelector<any, any> {\n  return (\n    typeof v === 'function' && v.release && typeof v.release === 'function'\n  );\n}\n","import {\n  NgModule,\n  Inject,\n  ModuleWithProviders,\n  OnDestroy,\n  InjectionToken,\n} from '@angular/core';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n  StoreFeature,\n  InitialState,\n} from './models';\nimport { combineReducers } from './utils';\nimport {\n  INITIAL_STATE,\n  INITIAL_REDUCERS,\n  REDUCER_FACTORY,\n  STORE_FEATURES,\n  _INITIAL_STATE,\n} from './tokens';\nimport { ACTIONS_SUBJECT_PROVIDERS, ActionsSubject } from './actions_subject';\nimport {\n  REDUCER_MANAGER_PROVIDERS,\n  ReducerManager,\n  ReducerObservable,\n} from './reducer_manager';\nimport {\n  SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n  ScannedActionsSubject,\n} from './scanned_actions_subject';\nimport { STATE_PROVIDERS } from './state';\nimport { STORE_PROVIDERS } from './store';\nexport class StoreRootModule {\n/**\n * @param {?} actions$\n * @param {?} reducer$\n * @param {?} scannedActions$\n */\nconstructor(\n    actions$: ActionsSubject,\n    reducer$: ReducerObservable,\n    scannedActions$: ScannedActionsSubject\n  ) {}\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ActionsSubject, },\n{type: ReducerObservable, },\n{type: ScannedActionsSubject, },\n];\n}\n\nfunction StoreRootModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreRootModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreRootModule.ctorParameters;\n}\n\nexport class StoreFeatureModule implements OnDestroy {\n/**\n * @param {?} features\n * @param {?} reducerManager\n */\nconstructor(\nprivate features: StoreFeature<any, any>[],\nprivate reducerManager: ReducerManager\n  ) {\n    features.forEach(feature => reducerManager.addFeature(feature));\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.features.forEach(feature =>\n      this.reducerManager.removeFeature(feature)\n    );\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Array, decorators: [{ type: Inject, args: [STORE_FEATURES, ] }, ]},\n{type: ReducerManager, },\n];\n}\n\nfunction StoreFeatureModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreFeatureModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreFeatureModule.ctorParameters;\n/** @type {?} */\nStoreFeatureModule.prototype.features;\n/** @type {?} */\nStoreFeatureModule.prototype.reducerManager;\n}\n\n\nexport type StoreConfig<T, V extends Action = Action> = {\n  initialState?: InitialState<T>;\n  reducerFactory?: ActionReducerFactory<T, V>;\n};\nexport class StoreModule {\n  static forRoot<T, V extends Action = Action>(\n    reducers: ActionReducerMap<T, V> | InjectionToken<ActionReducerMap<T, V>>,\n    config?: StoreConfig<T, V>\n  ): ModuleWithProviders;\n/**\n * @param {?} reducers\n * @param {?=} config\n * @return {?}\n */\nstatic forRoot(\n    reducers:\n      | ActionReducerMap<any, any>\n      | InjectionToken<ActionReducerMap<any, any>>,\n    config: StoreConfig<any, any> = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: StoreRootModule,\n      providers: [\n        { provide: _INITIAL_STATE, useValue: config.initialState },\n        {\n          provide: INITIAL_STATE,\n          useFactory: _initialStateFactory,\n          deps: [_INITIAL_STATE],\n        },\n        reducers instanceof InjectionToken\n          ? { provide: INITIAL_REDUCERS, useExisting: reducers }\n          : { provide: INITIAL_REDUCERS, useValue: reducers },\n        {\n          provide: REDUCER_FACTORY,\n          useValue: config.reducerFactory\n            ? config.reducerFactory\n            : combineReducers,\n        },\n        ACTIONS_SUBJECT_PROVIDERS,\n        REDUCER_MANAGER_PROVIDERS,\n        SCANNED_ACTIONS_SUBJECT_PROVIDERS,\n        STATE_PROVIDERS,\n        STORE_PROVIDERS,\n      ],\n    };\n  }\n\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducers: ActionReducerMap<T, V>,\n    config?: StoreConfig<T, V>\n  ): ModuleWithProviders;\n  static forFeature<T, V extends Action = Action>(\n    featureName: string,\n    reducer: ActionReducer<T, V>,\n    config?: StoreConfig<T, V>\n  ): ModuleWithProviders;\n/**\n * @param {?} featureName\n * @param {?} reducers\n * @param {?=} config\n * @return {?}\n */\nstatic forFeature(\n    featureName: string,\n    reducers: ActionReducerMap<any, any> | ActionReducer<any, any>,\n    config: StoreConfig<any, any> = {}\n  ): ModuleWithProviders {\n    return {\n      ngModule: StoreFeatureModule,\n      providers: [\n        {\n          provide: STORE_FEATURES,\n          multi: true,\n          useValue: /** @type {?} */(( <StoreFeature<any, any>>{\n            key: featureName,\n            reducers: reducers,\n            reducerFactory: config.reducerFactory\n              ? config.reducerFactory\n              : combineReducers,\n            initialState: config.initialState,\n          })),\n        },\n      ],\n    };\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: NgModule, args: [{}, ] },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction StoreModule_tsickle_Closure_declarations() {\n/** @type {?} */\nStoreModule.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStoreModule.ctorParameters;\n}\n\n/**\n * @param {?} initialState\n * @return {?}\n */\nexport function _initialStateFactory(initialState: any): any {\n  if (typeof initialState === 'function') {\n    return initialState();\n  }\n\n  return initialState;\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { OpaqueToken } from '@angular/core';\n\nexport const /** @type {?} */ _INITIAL_STATE = new OpaqueToken('_ngrx/store Initial State');\nexport const /** @type {?} */ INITIAL_STATE = new OpaqueToken('@ngrx/store Initial State');\nexport const /** @type {?} */ REDUCER_FACTORY = new OpaqueToken('@ngrx/store Reducer Factory');\nexport const /** @type {?} */ INITIAL_REDUCERS = new OpaqueToken('@ngrx/store Initial Reducers');\nexport const /** @type {?} */ STORE_FEATURES = new OpaqueToken('@ngrx/store Store Features');\n","import { Injectable, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport { Observer } from 'rxjs/Observer';\nimport { Action } from './models';\n\nexport const /** @type {?} */ INIT = '@ngrx/store/init';\nexport class ActionsSubject extends BehaviorSubject<Action>\n  implements OnDestroy {\nconstructor() {\n    super({ type: INIT });\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: Action): void {\n    if (typeof action === 'undefined') {\n      throw new Error(`Actions must be objects`);\n    } else if (typeof action.type === 'undefined') {\n      throw new Error(`Actions must have a type property`);\n    }\n\n    super.next(action);\n  }\n/**\n * @return {?}\n */\ncomplete() {\n    /* noop */\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    super.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ActionsSubject_tsickle_Closure_declarations() {\n/** @type {?} */\nActionsSubject.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nActionsSubject.ctorParameters;\n}\n\n\nexport const /** @type {?} */ ACTIONS_SUBJECT_PROVIDERS: Provider[] = [ActionsSubject];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Inject, OnDestroy, Provider } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\nimport { Observable } from 'rxjs/Observable';\nimport {\n  Action,\n  ActionReducer,\n  ActionReducerMap,\n  ActionReducerFactory,\n  StoreFeature,\n} from './models';\nimport { INITIAL_STATE, INITIAL_REDUCERS, REDUCER_FACTORY } from './tokens';\nimport { omit } from './utils';\nimport { ActionsSubject } from './actions_subject';\n/**\n * @abstract\n */\nexport abstract class ReducerObservable extends Observable<\n  ActionReducer<any, any>\n> {}\n/**\n * @abstract\n */\nexport abstract class ReducerManagerDispatcher extends ActionsSubject {}\nexport const /** @type {?} */ UPDATE = '@ngrx/store/update-reducers';\nexport class ReducerManager extends BehaviorSubject<ActionReducer<any, any>>\n  implements OnDestroy {\n/**\n * @param {?} dispatcher\n * @param {?} initialState\n * @param {?} reducers\n * @param {?} reducerFactory\n */\nconstructor(\nprivate dispatcher: ReducerManagerDispatcher,\nprivate initialState: any,\nprivate reducers: ActionReducerMap<any, any>,\nprivate reducerFactory: ActionReducerFactory<any, any>\n  ) {\n    super(reducerFactory(reducers, initialState));\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\naddFeature({\n    reducers,\n    reducerFactory,\n    initialState,\n    key,\n  }: StoreFeature<any, any>) {\n    const /** @type {?} */ reducer =\n      typeof reducers === 'function'\n        ? reducers\n        : reducerFactory(reducers, initialState);\n\n    this.addReducer(key, reducer);\n  }\n/**\n * @param {?} __0\n * @return {?}\n */\nremoveFeature({ key }: StoreFeature<any, any>) {\n    this.removeReducer(key);\n  }\n/**\n * @param {?} key\n * @param {?} reducer\n * @return {?}\n */\naddReducer(key: string, reducer: ActionReducer<any, any>) {\n    this.reducers = { ...this.reducers, [key]: reducer };\n\n    this.updateReducers();\n  }\n/**\n * @param {?} key\n * @return {?}\n */\nremoveReducer(key: string) {\n    this.reducers = omit(this.reducers, key);\n\n    this.updateReducers();\n  }\n/**\n * @return {?}\n */\nprivate updateReducers() {\n    this.next(this.reducerFactory(this.reducers, this.initialState));\n    this.dispatcher.next({ type: UPDATE });\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ReducerManagerDispatcher, },\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_STATE, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [INITIAL_REDUCERS, ] }, ]},\n{type: undefined, decorators: [{ type: Inject, args: [REDUCER_FACTORY, ] }, ]},\n];\n}\n\nfunction ReducerManager_tsickle_Closure_declarations() {\n/** @type {?} */\nReducerManager.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nReducerManager.ctorParameters;\n/** @type {?} */\nReducerManager.prototype.dispatcher;\n/** @type {?} */\nReducerManager.prototype.initialState;\n/** @type {?} */\nReducerManager.prototype.reducers;\n/** @type {?} */\nReducerManager.prototype.reducerFactory;\n}\n\n\nexport const /** @type {?} */ REDUCER_MANAGER_PROVIDERS: Provider[] = [\n  ReducerManager,\n  { provide: ReducerObservable, useExisting: ReducerManager },\n  { provide: ReducerManagerDispatcher, useExisting: ActionsSubject },\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Provider, OnDestroy } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Action } from './models';\nexport class ScannedActionsSubject extends Subject<Action>\n  implements OnDestroy {\n/**\n * @return {?}\n */\nngOnDestroy() {\n    this.complete();\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\n\nfunction ScannedActionsSubject_tsickle_Closure_declarations() {\n/** @type {?} */\nScannedActionsSubject.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nScannedActionsSubject.ctorParameters;\n}\n\n\nexport const /** @type {?} */ SCANNED_ACTIONS_SUBJECT_PROVIDERS: Provider[] = [\n  ScannedActionsSubject,\n];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n","import { Injectable, Provider } from '@angular/core';\nimport { Observer } from 'rxjs/Observer';\nimport { Observable } from 'rxjs/Observable';\nimport { Operator } from 'rxjs/Operator';\nimport { map } from 'rxjs/operator/map';\nimport { pluck } from 'rxjs/operator/pluck';\nimport { distinctUntilChanged } from 'rxjs/operator/distinctUntilChanged';\nimport { Action, ActionReducer } from './models';\nimport { ActionsSubject } from './actions_subject';\nimport { StateObservable } from './state';\nimport { ReducerManager } from './reducer_manager';\nimport { isSelector, createSelector } from './selector';\nexport class Store<T> extends Observable<T> implements Observer<Action> {\n/**\n * @param {?} state$\n * @param {?} actionsObserver\n * @param {?} reducerManager\n */\nconstructor(\n    state$: StateObservable,\nprivate actionsObserver: ActionsSubject,\nprivate reducerManager: ReducerManager\n  ) {\n    super();\n\n    this.source = state$;\n  }\n\n  select<K>(mapFn: (state: T) => K): Store<K>;\n  select<a extends keyof T>(key: a): Store<T[a]>;\n  select<a extends keyof T, b extends keyof T[a]>(\n    key1: a,\n    key2: b\n  ): Store<T[a][b]>;\n  select<a extends keyof T, b extends keyof T[a], c extends keyof T[a][b]>(\n    key1: a,\n    key2: b,\n    key3: c\n  ): Store<T[a][b][c]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c]\n  >(key1: a, key2: b, key3: c, key4: d): Store<T[a][b][c][d]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d]\n  >(key1: a, key2: b, key3: c, key4: d, key5: e): Store<T[a][b][c][d][e]>;\n  select<\n    a extends keyof T,\n    b extends keyof T[a],\n    c extends keyof T[a][b],\n    d extends keyof T[a][b][c],\n    e extends keyof T[a][b][c][d],\n    f extends keyof T[a][b][c][d][e]\n  >(\n    key1: a,\n    key2: b,\n    key3: c,\n    key4: d,\n    key5: e,\n    key6: f\n  ): Store<T[a][b][c][d][e][f]>;\n/**\n * @param {?} pathOrMapFn\n * @param {...?} paths\n * @return {?}\n */\nselect(\n    pathOrMapFn: ((state: T) => any) | string,\n    ...paths: string[]\n  ): Store<any> {\n    let /** @type {?} */ mapped$: Store<any>;\n\n    if (typeof pathOrMapFn === 'string') {\n      mapped$ = pluck.call(this, pathOrMapFn, ...paths);\n    } else if (typeof pathOrMapFn === 'function' && isSelector(pathOrMapFn)) {\n      mapped$ = map.call(this, pathOrMapFn);\n    } else if (typeof pathOrMapFn === 'function') {\n      mapped$ = map.call(this, createSelector(s => s, pathOrMapFn));\n    } else {\n      throw new TypeError(\n        `Unexpected type '${typeof pathOrMapFn}' in select operator,` +\n          ` expected 'string' or 'function'`\n      );\n    }\n\n    return distinctUntilChanged.call(mapped$);\n  }\n/**\n * @template R\n * @param {?} operator\n * @return {?}\n */\nlift<R>(operator: Operator<T, R>): Store<R> {\n    const /** @type {?} */ store = new Store<R>(this, this.actionsObserver, this.reducerManager);\n    store.operator = operator;\n\n    return store;\n  }\n/**\n * @template V\n * @param {?} action\n * @return {?}\n */\ndispatch<V extends Action = Action>(action: V) {\n    this.actionsObserver.next(action);\n  }\n/**\n * @param {?} action\n * @return {?}\n */\nnext(action: Action) {\n    this.actionsObserver.next(action);\n  }\n/**\n * @param {?} err\n * @return {?}\n */\nerror(err: any) {\n    this.actionsObserver.error(err);\n  }\n/**\n * @return {?}\n */\ncomplete() {\n    this.actionsObserver.complete();\n  }\n/**\n * @template State, Actions\n * @param {?} key\n * @param {?} reducer\n * @return {?}\n */\naddReducer<State, Actions extends Action = Action>(\n    key: string,\n    reducer: ActionReducer<State, Actions>\n  ) {\n    this.reducerManager.addReducer(key, reducer);\n  }\n/**\n * @template Key\n * @param {?} key\n * @return {?}\n */\nremoveReducer<Key extends keyof T>(key: Key) {\n    this.reducerManager.removeReducer(key);\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/**\n * @nocollapse\n */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: StateObservable, },\n{type: ActionsSubject, },\n{type: ReducerManager, },\n];\n}\n\nfunction Store_tsickle_Closure_declarations() {\n/** @type {?} */\nStore.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nStore.ctorParameters;\n/** @type {?} */\nStore.prototype.actionsObserver;\n/** @type {?} */\nStore.prototype.reducerManager;\n}\n\n\nexport const /** @type {?} */ STORE_PROVIDERS: Provider[] = [Store];\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}