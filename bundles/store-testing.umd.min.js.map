{"version":3,"sources":["modules/store/store-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ngrx","store","testing","tslib","ng","core","rxjs","this","MockState","_super","call","__extends","__decorate","Injectable","__metadata","BehaviorSubject","MOCK_SELECTORS","InjectionToken","afterEach","mockStore","TestBed","inject","MockStore","resetSelectors","_a","state$","actionsObserver","reducerManager","initialState","mockSelectors","e_1","_this","selectors","Map","setState","scannedActions$","asObservable","mockSelectors_1","__values","mockSelectors_1_1","next","done","mockSelector","value","overrideSelector","selector","e_1_1","error","return","prototype","nextState","lastState","set","resultSelector","createSelector","setResult","e_2","_b","keys","_c","release","clearResult","e_2_1","clear","select","prop","has","get","addReducer","removeReducer","refreshState","__assign","__param","Inject","INITIAL_STATE","ActionsSubject","ReducerManager","Object","Array","Store","MockReducerManager","addFeature","feature","addFeatures","provideMockStore","config","setNgrxMockEnvironment","provide","useValue","StateObservable","useClass","useExisting","Éµngrx_modules_store_testing_testing_a","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license NgRx 9.2.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('rxjs'), require('@ngrx/store'), require('@angular/core/testing')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/store/testing', ['exports', 'tslib', '@angular/core', 'rxjs', '@ngrx/store', '@angular/core/testing'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.store = global.ngrx.store || {}, global.ngrx.store.testing = {}), global.tslib, global.ng.core, global.rxjs, global.ngrx.store, global.ng.core.testing));\n}(this, (function (exports, tslib, core, rxjs, store, testing) { 'use strict';\n\n    var MockState = /** @class */ (function (_super) {\n        tslib.__extends(MockState, _super);\n        function MockState() {\n            return _super.call(this, {}) || this;\n        }\n        MockState = tslib.__decorate([\n            core.Injectable(),\n            tslib.__metadata(\"design:paramtypes\", [])\n        ], MockState);\n        return MockState;\n    }(rxjs.BehaviorSubject));\n\n    var MOCK_SELECTORS = new core.InjectionToken('@ngrx/store Mock Selectors');\n\n    if (typeof afterEach === 'function') {\n        afterEach(function () {\n            try {\n                var mockStore = testing.TestBed.inject(MockStore);\n                if (mockStore) {\n                    mockStore.resetSelectors();\n                }\n            }\n            catch (_a) { }\n        });\n    }\n    var MockStore = /** @class */ (function (_super) {\n        tslib.__extends(MockStore, _super);\n        function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {\n            var e_1, _a;\n            if (mockSelectors === void 0) { mockSelectors = []; }\n            var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;\n            _this.state$ = state$;\n            _this.initialState = initialState;\n            _this.selectors = new Map();\n            _this.resetSelectors();\n            _this.setState(_this.initialState);\n            _this.scannedActions$ = actionsObserver.asObservable();\n            try {\n                for (var mockSelectors_1 = tslib.__values(mockSelectors), mockSelectors_1_1 = mockSelectors_1.next(); !mockSelectors_1_1.done; mockSelectors_1_1 = mockSelectors_1.next()) {\n                    var mockSelector = mockSelectors_1_1.value;\n                    _this.overrideSelector(mockSelector.selector, mockSelector.value);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (mockSelectors_1_1 && !mockSelectors_1_1.done && (_a = mockSelectors_1.return)) _a.call(mockSelectors_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return _this;\n        }\n        MockStore.prototype.setState = function (nextState) {\n            this.state$.next(nextState);\n            this.lastState = nextState;\n        };\n        MockStore.prototype.overrideSelector = function (selector, value) {\n            this.selectors.set(selector, value);\n            var resultSelector = typeof selector === 'string'\n                ? store.createSelector(function () { }, function () { return value; })\n                : selector;\n            resultSelector.setResult(value);\n            return resultSelector;\n        };\n        MockStore.prototype.resetSelectors = function () {\n            var e_2, _a;\n            try {\n                for (var _b = tslib.__values(this.selectors.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                    var selector = _c.value;\n                    if (typeof selector !== 'string') {\n                        selector.release();\n                        selector.clearResult();\n                    }\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            this.selectors.clear();\n        };\n        MockStore.prototype.select = function (selector, prop) {\n            if (typeof selector === 'string' && this.selectors.has(selector)) {\n                return new rxjs.BehaviorSubject(this.selectors.get(selector)).asObservable();\n            }\n            return _super.prototype.select.call(this, selector, prop);\n        };\n        MockStore.prototype.addReducer = function () {\n            /* noop */\n        };\n        MockStore.prototype.removeReducer = function () {\n            /* noop */\n        };\n        /**\n         * Refreshes the existing state.\n         */\n        MockStore.prototype.refreshState = function () {\n            if (this.lastState)\n                this.setState(tslib.__assign({}, this.lastState));\n        };\n        MockStore = tslib.__decorate([\n            core.Injectable(),\n            tslib.__param(3, core.Inject(store.INITIAL_STATE)),\n            tslib.__param(4, core.Inject(MOCK_SELECTORS)),\n            tslib.__metadata(\"design:paramtypes\", [MockState,\n                store.ActionsSubject,\n                store.ReducerManager, Object, Array])\n        ], MockStore);\n        return MockStore;\n    }(store.Store));\n\n    var MockReducerManager = /** @class */ (function (_super) {\n        tslib.__extends(MockReducerManager, _super);\n        function MockReducerManager() {\n            return _super.call(this, function () { return undefined; }) || this;\n        }\n        MockReducerManager.prototype.addFeature = function (feature) {\n            /* noop */\n        };\n        MockReducerManager.prototype.addFeatures = function (feature) {\n            /* noop */\n        };\n        MockReducerManager = tslib.__decorate([\n            core.Injectable(),\n            tslib.__metadata(\"design:paramtypes\", [])\n        ], MockReducerManager);\n        return MockReducerManager;\n    }(rxjs.BehaviorSubject));\n\n    function provideMockStore(config) {\n        if (config === void 0) { config = {}; }\n        store.setNgrxMockEnvironment(true);\n        return [\n            store.ActionsSubject,\n            MockState,\n            MockStore,\n            { provide: store.INITIAL_STATE, useValue: config.initialState || {} },\n            { provide: MOCK_SELECTORS, useValue: config.selectors },\n            { provide: store.StateObservable, useClass: MockState },\n            { provide: store.ReducerManager, useClass: MockReducerManager },\n            { provide: store.Store, useExisting: MockStore },\n        ];\n    }\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MockReducerManager = MockReducerManager;\n    exports.MockState = MockState;\n    exports.MockStore = MockStore;\n    exports.provideMockStore = provideMockStore;\n    exports.Éµngrx_modules_store_testing_testing_a = MOCK_SELECTORS;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=store-testing.umd.js.map\n"]}