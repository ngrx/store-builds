{"version":3,"sources":["modules/store/store-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ngrx","store","testing","tslib","ng","core","rxjs","this","MockState","_super","call","__extends","__decorate","Injectable","__metadata","BehaviorSubject","MOCK_SELECTORS","InjectionToken","afterEach","store$1","TestBed","get","Store","resetSelectors","_a","MockStore","state$","actionsObserver","reducerManager","initialState","mockSelectors","_this","setState","scannedActions$","asObservable","forEach","mockSelector","overrideSelector","selector","value","MockStore_1","prototype","nextState","next","lastState","selectors","set","createSelector","setResult","_","release","clear","select","prop","has","addReducer","removeReducer","refreshState","__assign","Map","__param","Inject","INITIAL_STATE","ActionsSubject","ReducerManager","Object","Array","MockReducerManager","addFeature","feature","addFeatures","provideMockStore","config","provide","useValue","StateObservable","useClass","Éµngrx_modules_store_testing_testing_a","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license NgRx 8.6.0+4.sha-b146af5\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('rxjs'), require('@ngrx/store'), require('@angular/core/testing')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/store/testing', ['exports', 'tslib', '@angular/core', 'rxjs', '@ngrx/store', '@angular/core/testing'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.store = global.ngrx.store || {}, global.ngrx.store.testing = {}), global.tslib, global.ng.core, global.rxjs, global.ngrx.store, global.ng.core.testing));\n}(this, (function (exports, tslib, core, rxjs, store, testing) { 'use strict';\n\n    var MockState = /** @class */ (function (_super) {\n        tslib.__extends(MockState, _super);\n        function MockState() {\n            return _super.call(this, {}) || this;\n        }\n        MockState = tslib.__decorate([\n            core.Injectable(),\n            tslib.__metadata(\"design:paramtypes\", [])\n        ], MockState);\n        return MockState;\n    }(rxjs.BehaviorSubject));\n\n    var MOCK_SELECTORS = new core.InjectionToken('@ngrx/store Mock Selectors');\n\n    if (typeof afterEach === 'function') {\n        afterEach(function () {\n            try {\n                var store$1 = testing.TestBed.get(store.Store);\n                if (store$1 && 'resetSelectors' in store$1) {\n                    store$1.resetSelectors();\n                }\n            }\n            catch (_a) { }\n        });\n    }\n    var MockStore = /** @class */ (function (_super) {\n        tslib.__extends(MockStore, _super);\n        function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {\n            var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;\n            _this.state$ = state$;\n            _this.initialState = initialState;\n            _this.resetSelectors();\n            _this.setState(_this.initialState);\n            _this.scannedActions$ = actionsObserver.asObservable();\n            if (mockSelectors) {\n                mockSelectors.forEach(function (mockSelector) {\n                    var selector = mockSelector.selector;\n                    if (typeof selector === 'string') {\n                        _this.overrideSelector(selector, mockSelector.value);\n                    }\n                    else {\n                        _this.overrideSelector(selector, mockSelector.value);\n                    }\n                });\n            }\n            return _this;\n        }\n        MockStore_1 = MockStore;\n        MockStore.prototype.setState = function (nextState) {\n            this.state$.next(nextState);\n            this.lastState = nextState;\n        };\n        MockStore.prototype.overrideSelector = function (selector, value) {\n            MockStore_1.selectors.set(selector, value);\n            if (typeof selector === 'string') {\n                var stringSelector = store.createSelector(function () { }, function () { return value; });\n                return stringSelector;\n            }\n            selector.setResult(value);\n            return selector;\n        };\n        MockStore.prototype.resetSelectors = function () {\n            MockStore_1.selectors.forEach(function (_, selector) {\n                if (typeof selector !== 'string') {\n                    selector.release();\n                    selector.setResult();\n                }\n            });\n            MockStore_1.selectors.clear();\n        };\n        MockStore.prototype.select = function (selector, prop) {\n            if (typeof selector === 'string' && MockStore_1.selectors.has(selector)) {\n                return new rxjs.BehaviorSubject(MockStore_1.selectors.get(selector)).asObservable();\n            }\n            return _super.prototype.select.call(this, selector, prop);\n        };\n        MockStore.prototype.addReducer = function () {\n            /* noop */\n        };\n        MockStore.prototype.removeReducer = function () {\n            /* noop */\n        };\n        /**\n         * Refreshes the existing state.\n         */\n        MockStore.prototype.refreshState = function () {\n            this.setState(tslib.__assign({}, this.lastState));\n        };\n        var MockStore_1;\n        MockStore.selectors = new Map();\n        MockStore = MockStore_1 = tslib.__decorate([\n            core.Injectable(),\n            tslib.__param(3, core.Inject(store.INITIAL_STATE)),\n            tslib.__param(4, core.Inject(MOCK_SELECTORS)),\n            tslib.__metadata(\"design:paramtypes\", [MockState,\n                store.ActionsSubject,\n                store.ReducerManager, Object, Array])\n        ], MockStore);\n        return MockStore;\n    }(store.Store));\n\n    var MockReducerManager = /** @class */ (function (_super) {\n        tslib.__extends(MockReducerManager, _super);\n        function MockReducerManager() {\n            return _super.call(this, function () { return undefined; }) || this;\n        }\n        MockReducerManager.prototype.addFeature = function (feature) {\n            /* noop */\n        };\n        MockReducerManager.prototype.addFeatures = function (feature) {\n            /* noop */\n        };\n        MockReducerManager = tslib.__decorate([\n            core.Injectable(),\n            tslib.__metadata(\"design:paramtypes\", [])\n        ], MockReducerManager);\n        return MockReducerManager;\n    }(rxjs.BehaviorSubject));\n\n    function provideMockStore(config) {\n        if (config === void 0) { config = {}; }\n        return [\n            store.ActionsSubject,\n            MockState,\n            { provide: store.INITIAL_STATE, useValue: config.initialState || {} },\n            { provide: MOCK_SELECTORS, useValue: config.selectors },\n            { provide: store.StateObservable, useClass: MockState },\n            { provide: store.ReducerManager, useClass: MockReducerManager },\n            { provide: store.Store, useClass: MockStore },\n        ];\n    }\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.MockReducerManager = MockReducerManager;\n    exports.MockState = MockState;\n    exports.MockStore = MockStore;\n    exports.provideMockStore = provideMockStore;\n    exports.Éµngrx_modules_store_testing_testing_a = MOCK_SELECTORS;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n})));\n//# sourceMappingURL=store-testing.umd.js.map\n"]}