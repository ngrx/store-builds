{"version":3,"sources":["modules/store/store-testing.umd.js"],"names":["global","factory","exports","module","require","define","amd","self","ngrx","store","testing","tslib","ng","core","rxjs","this","tslib_1","MockState","_super","call","__extends","__decorate","Injectable","__metadata","BehaviorSubject","MOCK_SELECTORS","InjectionToken","MockStore","state$","actionsObserver","reducerManager","initialState","mockSelectors","_this","resetSelectors","next","scannedActions$","asObservable","forEach","mockSelector","overrideSelector","selector","value","MockStore_1","prototype","setState","nextState","selectors","set","createSelector","setResult","_","release","clear","select","prop","has","get","addReducer","removeReducer","Map","__param","Inject","INITIAL_STATE","ActionsSubject","ReducerManager","Object","Array","Store","MockReducerManager","ɵngrx_modules_store_testing_testing_a","provideMockStore","config","provide","useValue","StateObservable","useClass","defineProperty"],"mappings":"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","sourcesContent":["/**\n * @license NgRx 8.1.0\n * (c) 2015-2018 Brandon Roberts, Mike Ryan, Rob Wormald, Victor Savkin\n * License: MIT\n */\n(function (global, factory) {\n    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('tslib'), require('@angular/core'), require('rxjs'), require('@ngrx/store')) :\n    typeof define === 'function' && define.amd ? define('@ngrx/store/testing', ['exports', 'tslib', '@angular/core', 'rxjs', '@ngrx/store'], factory) :\n    (global = global || self, factory((global.ngrx = global.ngrx || {}, global.ngrx.store = global.ngrx.store || {}, global.ngrx.store.testing = {}), global.tslib, global.ng.core, global.rxjs, global['@ngrx/store']));\n}(this, function (exports, tslib_1, core, rxjs, store) { 'use strict';\n\n    var MockState = /** @class */ (function (_super) {\n        tslib_1.__extends(MockState, _super);\n        function MockState() {\n            return _super.call(this, {}) || this;\n        }\n        MockState = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__metadata(\"design:paramtypes\", [])\n        ], MockState);\n        return MockState;\n    }(rxjs.BehaviorSubject));\n\n    var MOCK_SELECTORS = new core.InjectionToken('@ngrx/store Mock Selectors');\n\n    var MockStore = /** @class */ (function (_super) {\n        tslib_1.__extends(MockStore, _super);\n        function MockStore(state$, actionsObserver, reducerManager, initialState, mockSelectors) {\n            var _this = _super.call(this, state$, actionsObserver, reducerManager) || this;\n            _this.state$ = state$;\n            _this.initialState = initialState;\n            _this.resetSelectors();\n            _this.state$.next(_this.initialState);\n            _this.scannedActions$ = actionsObserver.asObservable();\n            if (mockSelectors) {\n                mockSelectors.forEach(function (mockSelector) {\n                    var selector = mockSelector.selector;\n                    if (typeof selector === 'string') {\n                        _this.overrideSelector(selector, mockSelector.value);\n                    }\n                    else {\n                        _this.overrideSelector(selector, mockSelector.value);\n                    }\n                });\n            }\n            return _this;\n        }\n        MockStore_1 = MockStore;\n        MockStore.prototype.setState = function (nextState) {\n            this.state$.next(nextState);\n        };\n        MockStore.prototype.overrideSelector = function (selector, value) {\n            MockStore_1.selectors.set(selector, value);\n            if (typeof selector === 'string') {\n                var stringSelector = store.createSelector(function () { }, function () { return value; });\n                return stringSelector;\n            }\n            selector.setResult(value);\n            return selector;\n        };\n        MockStore.prototype.resetSelectors = function () {\n            MockStore_1.selectors.forEach(function (_, selector) {\n                if (typeof selector !== 'string') {\n                    selector.release();\n                    selector.setResult();\n                }\n            });\n            MockStore_1.selectors.clear();\n        };\n        MockStore.prototype.select = function (selector, prop) {\n            if (MockStore_1.selectors.has(selector)) {\n                return new rxjs.BehaviorSubject(MockStore_1.selectors.get(selector)).asObservable();\n            }\n            return _super.prototype.select.call(this, selector, prop);\n        };\n        MockStore.prototype.addReducer = function () {\n            /* noop */\n        };\n        MockStore.prototype.removeReducer = function () {\n            /* noop */\n        };\n        var MockStore_1;\n        MockStore.selectors = new Map();\n        MockStore = MockStore_1 = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__param(3, core.Inject(store.INITIAL_STATE)),\n            tslib_1.__param(4, core.Inject(MOCK_SELECTORS)),\n            tslib_1.__metadata(\"design:paramtypes\", [MockState,\n                store.ActionsSubject,\n                store.ReducerManager, Object, Array])\n        ], MockStore);\n        return MockStore;\n    }(store.Store));\n\n    var MockReducerManager = /** @class */ (function (_super) {\n        tslib_1.__extends(MockReducerManager, _super);\n        function MockReducerManager() {\n            return _super.call(this, function () { return undefined; }) || this;\n        }\n        MockReducerManager = tslib_1.__decorate([\n            core.Injectable(),\n            tslib_1.__metadata(\"design:paramtypes\", [])\n        ], MockReducerManager);\n        return MockReducerManager;\n    }(rxjs.BehaviorSubject));\n\n    function provideMockStore(config) {\n        if (config === void 0) { config = {}; }\n        return [\n            store.ActionsSubject,\n            MockState,\n            { provide: store.INITIAL_STATE, useValue: config.initialState },\n            { provide: MOCK_SELECTORS, useValue: config.selectors },\n            { provide: store.StateObservable, useClass: MockState },\n            { provide: store.ReducerManager, useClass: MockReducerManager },\n            { provide: store.Store, useClass: MockStore },\n        ];\n    }\n\n    /**\n     * Generated bundle index. Do not edit.\n     */\n\n    exports.ɵngrx_modules_store_testing_testing_a = MOCK_SELECTORS;\n    exports.provideMockStore = provideMockStore;\n    exports.MockReducerManager = MockReducerManager;\n    exports.MockState = MockState;\n    exports.MockStore = MockStore;\n\n    Object.defineProperty(exports, '__esModule', { value: true });\n\n}));\n//# sourceMappingURL=store-testing.umd.js.map\n"]}